Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;For_S;S;C;Harvest;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;MostHealthy;S;If_B_then_S;B;is_Type;Ranged;S;For_S;S;For_S;S;C;MoveToUnit;Enemy;Closest
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S;B;is_Type;Ranged;S;For_S;S;For_S;S;C;MoveToUnit;Enemy;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;25;S;If_B_then_S;B;HasNumberOfUnits;Light;25;S;C;Attack;Strongest;S;S_S;S;C;Train;Worker;Up;S;S_S;S;C;Attack;Random;S;C;Train;Light;Right
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;S_S;S;C;Harvest;S;For_S;S;C;Build;Heavy;EnemyDir;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Closest



for(Unit u){
	if(HaveQtdUnitsAttacking(3)) then {
		u.harvest()
		for(Unit u){
			u.build(Heavy,EnemyDir)
		}
	} else {
		u.train(Worker,Up)
		u.attack(Closest)
	}
}
FIM
