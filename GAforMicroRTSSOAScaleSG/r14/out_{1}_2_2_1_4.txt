Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Harvest;S;For_S;S;C;Attack;MostHealthy;S;For_S;S;If_B_then_S;B;IsBuilder;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Idle;S;For_S;S;S_S;S;C;Attack;Closest;S;C;Build;Ranged;Down;S;For_S;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Harvest;S;For_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;For_S;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;S_S;S;C;Attack;Random;S;C;Build;Heavy;Up;S;S_S;S;C;Attack;LessHealthy;S;C;MoveAway;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Light;0;S;C;Build;Heavy;Down;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;5;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Attack;Weakest;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;Attack;Weakest;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;For_S;S;C;Train;Worker;Up



for(Unit u){
	if(HasNumberOfWorkersHarvesting(1)) then {
		u.attack(Weakest)
	} else {
		if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
			u.harvest()
		}
		for(Unit u){
			u.train(Worker,Up)
		}
	}
}
FIM
