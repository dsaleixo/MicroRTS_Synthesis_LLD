Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;S_S;S;For_S;S;For_S;S;C;Train;Worker;Down;S;For_S;S;C;Attack;Weakest
Atual=S;S_S;S;For_S;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;C;Train;Worker;Down;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;For_S;S;C;Build;Light;Down;S;If_B_then_S;B;is_Type;Worker;S;C;Attack;Strongest
Atual=S;S_S;S;For_S;S;If_B_then_S;B;CanHarvest;S;For_S;S;C;Train;Worker;Down;S;For_S;S;For_S;S;S_S;S;S_S;S;For_S;S;C;Build;Ranged;Down;S;C;Attack;Closest;S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Base;10;S;C;Train;Light;Left;S;C;Attack;Weakest
Atual=S;S_S;S;For_S;S;If_B_then_S;B;CanHarvest;S;For_S;S;C;Train;Worker;Down;S;For_S;S;For_S;S;S_S;S;For_S;S;C;Build;Heavy;Right;S;C;Attack;Closest
Atual=S;S_S;S;For_S;S;If_B_then_S;B;CanHarvest;S;For_S;S;C;Train;Worker;Down;S;For_S;S;For_S;S;S_S;S;For_S;S;C;Build;Light;Down;S;C;Attack;Closest
Atual=S;S_S;S;For_S;S;If_B_then_S;B;CanHarvest;S;For_S;S;S_S;S;S_S;S;C;MoveAway;S;C;Idle;S;C;Train;Worker;Down;S;For_S;S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Harvest;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Attack;Closest
Atual=S;S_S;S;For_S;S;If_B_then_S;B;CanHarvest;S;For_S;S;S_S;S;C;Idle;S;C;Train;Worker;Down;S;For_S;S;For_S;S;S_S;S;For_S;S;C;Idle;S;C;Attack;Farthest
Atual=S;S_S;S;For_S;S;If_B_then_S;B;CanAttack;S;For_S;S;S_S;S;C;Idle;S;C;Train;Worker;Down;S;For_S;S;For_S;S;For_S;S;C;MoveToUnit;Enemy;LessHealthy
Atual=S;S_S;S;For_S;S;S_S;S;For_S;S;C;MoveToUnit;Enemy;Closest;S;If_B_then_S;B;CanAttack;S;For_S;S;S_S;S;C;Idle;S;C;Train;Worker;Down;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;MoveToUnit;Enemy;LessHealthy
Atual=S;S_S;S;For_S;S;S_S;S;For_S;S;C;MoveToUnit;Enemy;Closest;S;If_B_then_S;B;CanAttack;S;For_S;S;S_S;S;C;Idle;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;MoveToUnit;Enemy;LessHealthy
Atual=S;S_S;S;For_S;S;S_S;S;For_S;S;C;MoveToUnit;Enemy;Strongest;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Idle;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Idle
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;S_S;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Strongest;S;C;Train;Worker;Right;S;S_S;S;C;Build;Ranged;EnemyDir;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Strongest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Worker;4;S;C;Harvest;S;C;MoveToUnit;Enemy;MostHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;S_S;S;C;MoveAway;S;C;Harvest;S;For_S;S;C;Attack;Farthest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;S_S;S;C;Build;Ranged;Right;S;C;Train;Worker;Right;S;For_S;S;C;MoveToUnit;Enemy;Strongest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;C;Harvest;S;If_B_then_S_else_S;B;HasNumberOfUnits;Barracks;50;S;C;Harvest;S;C;Attack;Weakest;S;C;Train;Worker;EnemyDir



for(Unit u){
	for(Unit u){
		u.idle()
	}
	for(Unit u){
		if(u.canHarvest()) then {
			u.harvest()
			u.attack(Weakest)
		} else {
			u.train(Worker,EnemyDir)
		}
	}
}
FIM
