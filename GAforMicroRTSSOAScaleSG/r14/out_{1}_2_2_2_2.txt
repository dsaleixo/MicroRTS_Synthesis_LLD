Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;10;S;C;MoveToUnit;Enemy;Closest;S;C;Harvest;S;For_S;S;S_S;S;C;Train;Ranged;EnemyDir;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;10;S;C;MoveToUnit;Enemy;Closest;S;C;Harvest;S;C;Harvest;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;S_S;S;C;MoveToUnit;Enemy;Closest;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Build;Ranged;Left;S;C;Attack;Strongest;S;C;Harvest;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;0;S;C;Train;Worker;Up;S;S_S;S;S_S;S;C;MoveToUnit;Enemy;Random;S;C;Attack;Closest;S;C;MoveAway;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;S_S;S;C;MoveToUnit;Enemy;Closest;S;For_S;S;S_S;S;Empty;S;Empty;S;C;Harvest;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;0;S;C;Train;Worker;Up;S;C;MoveToUnit;Ally;Strongest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;MoveToUnit;Enemy;Closest;S;C;Harvest;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;0;S;C;Train;Worker;EnemyDir;S;C;Attack;LessHealthy;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;MoveToUnit;Enemy;Closest;S;C;Harvest;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Idle



for(Unit u){
	if(u.canHarvest()) then {
		if(HasNumberOfWorkersHarvesting(2)) then {
			u.moveToUnit(Enemy,Closest)
		} else {
			u.harvest()
		}
	} else {
		for(Unit u){
			u.train(Worker,EnemyDir)
		}
	}
	u.idle()
}
FIM
