Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;Attack;Closest;S;S_S;S;For_S;S;C;Idle;S;For_S;S;C;Harvest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;Attack;Closest;S;S_S;S;For_S;S;C;Idle;S;For_S;S;C;Build;Worker;Left
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;Attack;Random;S;S_S;S;For_S;S;C;Idle;S;For_S;S;C;Build;Worker;Left
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;Attack;Random;S;S_S;S;For_S;S;C;Idle;S;For_S;S;Empty
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;Idle;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;C;Harvest;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;S_S;S;S_S;S;For_S;S;C;Build;Barracks;Up;S;C;Harvest;S;C;MoveAway;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;MoveAway;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;S_S;S;For_S;S;Empty;S;C;Train;Heavy;Up;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;0;S;For_S;S;C;Attack;Random;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;0;S;For_S;S;C;Attack;Closest;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;0;S;For_S;S;S_S;S;C;Attack;Weakest;S;If_B_then_S;B;is_Type;Base;S;For_S;S;C;Build;Heavy;Left;S;For_S;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;0;S;For_S;S;S_S;S;C;Attack;Weakest;S;If_B_then_S;B;is_Type;Base;S;For_S;S;C;Build;Heavy;Down;S;For_S;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;0;S;For_S;S;S_S;S;C;Attack;Weakest;S;If_B_then_S;B;is_Type;Base;S;For_S;S;C;Build;Light;Right;S;For_S;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;0;S;For_S;S;S_S;S;C;Attack;Weakest;S;If_B_then_S;B;is_Type;Worker;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;For_S;S;C;Harvest;S;S_S;S;For_S;S;C;Build;Light;Left;S;S_S;S;C;Idle;S;C;Idle;S;For_S;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;0;S;For_S;S;S_S;S;C;Attack;Weakest;S;If_B_then_S;B;is_Type;Worker;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;25;S;For_S;S;C;Harvest;S;For_S;S;C;Build;Light;Left;S;For_S;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;0;S;For_S;S;S_S;S;C;Attack;Weakest;S;If_B_then_S;B;is_Type;Worker;S;For_S;S;S_S;S;S_S;S;C;Harvest;S;C;Attack;Weakest;S;For_S;S;C;Idle;S;For_S;S;C;MoveToUnit;Enemy;Strongest



for(Unit u){
	u.train(Worker,Down)
	if(HasNumberOfWorkersHarvesting(0)) then {
		for(Unit u){
			u.attack(Weakest)
			if(u.is(Worker)) then {
				for(Unit u){
					u.harvest()
					u.attack(Weakest)
					for(Unit u){
						u.idle()
					}
				}
			}
		}
	} else {
		for(Unit u){
			u.moveToUnit(Enemy,Strongest)
		}
	}
}
FIM
