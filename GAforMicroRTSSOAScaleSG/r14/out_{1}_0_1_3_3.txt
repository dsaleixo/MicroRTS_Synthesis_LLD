Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Build;Barracks;Up;S;C;Train;Worker;Up;S;For_S;S;C;Build;Heavy;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Weakest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;0;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;Attack;Closest;S;C;Build;Heavy;Left;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Down;S;C;Train;Barracks;Right;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Down;S;Empty;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;For_S;S;C;Train;Worker;Left;S;Empty;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Harvest
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Build;Base;Up;S;C;Train;Worker;Down;S;S_S;S;C;Idle;S;C;MoveToUnit;Enemy;Farthest;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Train;Barracks;EnemyDir;S;C;Build;Light;Right
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;Idle;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;Idle;S;C;MoveToUnit;Enemy;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;S_S;S;S_S;S;C;Harvest;S;C;Train;Base;Down;S;S_S;S;C;Attack;LessHealthy;S;C;Idle
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;S_S;S;C;Build;Ranged;Left;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;S_S;S;C;Build;Base;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Build;Worker;Down;S;S_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;C;Build;Worker;Down;S;If_B_then_S;B;HasNumberOfUnits;Base;50;S;C;Attack;Closest;S;S_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;C;Build;Heavy;Up;S;Empty;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Build;Heavy;Right;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;S_S;S;C;Harvest;S;C;Harvest;S;S_S;S;C;Build;Heavy;Right;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;S_S;S;C;Train;Ranged;Left;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;S_S;S;C;Build;Barracks;Left;S;C;Harvest;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Weakest



for(Unit u){
	if(HaveQtdUnitsAttacking(3)) then {
		u.build(Barracks,Left)
		u.harvest()
	} else {
		u.train(Worker,Up)
		u.attack(Weakest)
	}
}
FIM
