Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;C;Attack;Random;S;C;Attack;MostHealthy;S;S_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Build;Base;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Attack;Random;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Attack;Random;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Attack;Random;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Attack;Random;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Attack;Random;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Attack;Weakest;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;If_B_then_S;B;CanHarvest;S;S_S;S;C;Build;Base;Right;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Attack;Weakest;S;C;Harvest;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;S_S;S;C;Build;Base;Up;S;For_S;S;C;Idle;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Attack;Weakest;S;C;Harvest;S;If_B_then_S;B;is_Type;Ranged;S;If_B_then_S;B;CanHarvest;S;C;Harvest;S;C;Train;Worker;EnemyDir



for(Unit u){
	if(u.canAttack()) then {
		u.build(Base,Up)
		for(Unit u){
			u.idle()
		}
		for(Unit u){
			if(HasNumberOfWorkersHarvesting(2)) then {
				u.attack(Weakest)
			} else {
				u.harvest()
			}
		}
	} else {
		u.train(Worker,EnemyDir)
	}
}
FIM
