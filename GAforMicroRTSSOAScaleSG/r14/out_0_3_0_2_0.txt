Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Attack;Strongest;S;C;Train;Worker;Left
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;For_S;S;C;Build;Heavy;Up;S;C;Attack;Strongest;S;C;Train;Worker;Left
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;For_S;S;C;Build;Ranged;Up;S;C;Attack;Strongest;S;C;Train;Worker;Left
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;For_S;S;C;Build;Light;Left;S;C;Attack;Strongest;S;C;Train;Worker;Left
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;For_S;S;C;Build;Light;Down;S;C;Attack;Strongest;S;C;Train;Worker;Left
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;C;Build;Light;Down;S;C;Attack;Strongest;S;C;Train;Worker;Right
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;For_S;S;C;Build;Heavy;Right;S;C;Attack;Strongest;S;C;Train;Worker;Right
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;S_S;S;S_S;S;C;Train;Ranged;EnemyDir;S;C;Harvest;S;C;Build;Barracks;Right;S;For_S;S;S_S;S;S_S;S;C;Attack;Strongest;S;C;Harvest;S;C;Harvest;S;C;Train;Worker;Right



for(Unit u){
	if(u.isBuilder()) then {
		u.harvest()
		for(Unit u){
			u.attack(Strongest)
		}
	} else {
		u.train(Worker,Right)
	}
}
FIM
