Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;C;Build;Ranged;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;C;Train;Ranged;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;C;Harvest;S;Empty;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Attack;Closest;S;C;Harvest;S;C;Train;Worker;Down;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;C;Harvest;S;Empty;S;C;Idle



for(Unit u){
	if(u.canHarvest()) then {
		if(HasNumberOfWorkersHarvesting(2)) then {
			u.attack(Closest)
		} else {
			u.harvest()
		}
	} else {
		u.train(Worker,Down)
	}
}
FIM
