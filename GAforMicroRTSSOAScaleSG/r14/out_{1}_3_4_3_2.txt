Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;For_S;S;C;Train;Worker;Up;S;C;Idle;S;S_S;S;For_S;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Build;Worker;Left
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;1;S;For_S;S;C;Train;Worker;Up;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Harvest;S;C;Idle;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;0;S;For_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;LessHealthy;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;For_S;S;C;Train;Worker;Up;S;C;Build;Worker;Up;S;C;MoveToUnit;Enemy;LessHealthy;S;For_S;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;For_S;S;C;Train;Worker;Down;S;Empty;S;C;MoveToUnit;Enemy;LessHealthy;S;For_S;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;For_S;S;C;Train;Worker;Right;S;Empty;S;C;MoveToUnit;Enemy;LessHealthy;S;For_S;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;C;Train;Worker;Right;S;Empty;S;C;Harvest;S;For_S;S;For_S;S;S_S;S;C;Attack;LessHealthy;S;S_S;S;C;MoveAway;S;C;Attack;Strongest
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;C;Train;Worker;Right;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfUnits;Base;50;S;For_S;S;For_S;S;For_S;S;C;Harvest;S;If_B_then_S;B;IsBuilder;S;S_S;S;C;Idle;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;C;Train;Worker;Right;S;For_S;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;S_S;S;C;Train;Worker;Right;S;S_S;S;C;Attack;Strongest;S;C;Build;Ranged;EnemyDir;S;For_S;S;S_S;S;C;Train;Heavy;EnemyDir;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;If_B_then_S;B;CanHarvest;S;C;Harvest;S;For_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;C;Idle;S;S_S;S;S_S;S;For_S;S;C;Train;Light;Down;S;S_S;S;C;Train;Base;EnemyDir;S;C;Harvest;S;For_S;S;C;Attack;Strongest;S;For_S;S;C;Build;Barracks;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;S_S;S;For_S;S;C;Train;Light;Left;S;C;Harvest;S;For_S;S;C;Attack;Strongest;S;For_S;S;C;Build;Barracks;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;S_S;S;For_S;S;C;Train;Light;Left;S;C;Harvest;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Build;Barracks;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;S_S;S;For_S;S;C;Train;Light;EnemyDir;S;C;Harvest;S;For_S;S;C;Attack;Strongest;S;For_S;S;C;Build;Barracks;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;S_S;S;For_S;S;C;Train;Light;Right;S;C;Harvest;S;For_S;S;C;Attack;Strongest;S;For_S;S;C;Build;Barracks;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;For_S;S;S_S;S;C;Harvest;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;1;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Attack;Strongest;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfUnits;Ranged;5;S;C;Harvest;S;For_S;S;S_S;S;C;Train;Base;Down;S;C;Train;Worker;Up



for(Unit u){
	if(u.canAttack()) then {
		for(Unit u){
			u.harvest()
			if(HasNumberOfWorkersHarvesting(1)) then {
				for(Unit u){
					u.attack(LessHealthy)
				}
			}
		}
		for(Unit u){
			u.attack(Strongest)
		}
	} else {
		for(Unit u){
			for(Unit u){
				u.train(Worker,Up)
			}
		}
	}
}
FIM
