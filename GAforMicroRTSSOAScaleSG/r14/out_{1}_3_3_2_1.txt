Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Heavy;Left;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Strongest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Ranged;Up;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Ranged;Up;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Ranged;Up;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Right;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Ranged;Up;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Right;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Right;S;C;Harvest
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;If_B_then_S;B;HasLessNumberOfUnits;Ranged;5;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;MoveAway;S;S_S;S;C;Build;Ranged;Right;S;C;Train;Worker;Down;S;C;Idle
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;For_S;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;For_S;S;C;Train;Worker;Right;S;C;Harvest



for(Unit u){
	u.idle()
	if(u.HasUnitThatKillsInOneAttack()) then {
		for(Unit u){
			u.train(Worker,Right)
		}
	}
	u.harvest()
}
FIM
