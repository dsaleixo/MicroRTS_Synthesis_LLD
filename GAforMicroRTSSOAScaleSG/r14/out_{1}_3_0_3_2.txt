Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;For_S;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasNumberOfUnits;Base;1;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest;S;For_S;S;S_S;S;C;Train;Base;Right;S;C;Build;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Weakest;S;For_S;S;C;Build;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Weakest;S;For_S;S;If_B_then_S;B;OpponentHasNumberOfUnits;Ranged;10;S;For_S;S;C;Harvest
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Heavy;EnemyDir;S;C;Train;Worker;Down;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;C;Build;Light;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Harvest;S;C;MoveAway;S;S_S;S;C;Attack;Weakest;S;S_S;S;C;MoveAway;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;S_S;S;C;Build;Ranged;Right;S;C;Harvest;S;C;MoveAway;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;For_S;S;For_S;S;C;MoveToUnit;Enemy;Weakest;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Left



for(Unit u){
	u.idle()
	u.build(Ranged,Right)
	u.harvest()
	if(HasNumberOfWorkersHarvesting(1)) then {
		for(Unit u){
			for(Unit u){
				u.moveToUnit(Enemy,Weakest)
			}
		}
	} else {
		u.train(Worker,Left)
	}
}
FIM
