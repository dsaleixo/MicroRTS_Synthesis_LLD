Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Attack;Closest;S;S_S;S;For_S;S;C;Train;Worker;Right;S;S_S;S;C;Train;Barracks;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;2;S;C;Idle;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;2;S;Empty;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;S_S;S;C;Train;Ranged;Left;S;C;Harvest;S;For_S;S;C;Attack;Random;S;C;MoveAway;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;2;S;Empty;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;C;Harvest;S;For_S;S;C;Attack;Random;S;Empty;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;2;S;Empty;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;C;Harvest;S;For_S;S;C;Attack;Random;S;Empty;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;2;S;Empty;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;C;Harvest;S;For_S;S;C;Attack;Random;S;Empty;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;2;S;Empty;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;C;Harvest;S;For_S;S;C;Attack;Random;S;Empty;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;2;S;Empty;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;C;Harvest;S;For_S;S;C;Attack;Weakest;S;Empty;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;2;S;Empty;S;C;Train;Worker;EnemyDir



for(Unit u){
	if(u.canHarvest()) then {
		u.harvest()
		for(Unit u){
			u.attack(Weakest)
		}
	} else {
		e
	}
	if(u.HasUnitWithinDistanceFromOpponent(2)) then {
		e
	} else {
		u.train(Worker,EnemyDir)
	}
}
FIM
