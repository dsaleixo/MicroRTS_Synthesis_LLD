Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Ranged;Left;S;C;Attack;MostHealthy;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;S_S;S;C;Train;Worker;Right;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;Build;Base;EnemyDir;S;S_S;S;S_S;S;C;Harvest;S;C;MoveToUnit;Enemy;MostHealthy;S;S_S;S;C;Train;Worker;Left;S;C;Idle
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;MoveToUnit;Enemy;LessHealthy;S;S_S;S;S_S;S;C;Harvest;S;C;MoveToUnit;Enemy;MostHealthy;S;C;Train;Worker;Left



for(Unit u){
	for(Unit u){
		u.idle()
	}
	if(HasNumberOfWorkersHarvesting(1)) then {
		u.moveToUnit(Enemy,LessHealthy)
	} else {
		u.harvest()
		u.moveToUnit(Enemy,MostHealthy)
		u.train(Worker,Left)
	}
}
FIM
