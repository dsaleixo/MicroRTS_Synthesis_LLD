Unloading StdEnv/2020
Atual=S;For_S;S;If_B_then_S;B;IsBuilder;S;C;Attack;Farthest
Atual=S;For_S;S;If_B_then_S;B;IsBuilder;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S;B;IsBuilder;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;C;Train;Heavy;Up;S;If_B_then_S;B;IsBuilder;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;If_B_then_S;B;IsBuilder;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Worker;Down;S;C;Build;Ranged;Up;S;S_S;S;C;Train;Worker;Up;S;If_B_then_S;B;IsBuilder;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;If_B_then_S;B;CanAttack;S;C;Harvest;S;S_S;S;C;Build;Light;Down;S;For_S;S;C;Idle;S;S_S;S;C;Train;Worker;Up;S;If_B_then_S;B;IsBuilder;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;For_S;S;C;Train;Worker;Down;S;S_S;S;C;Train;Worker;Up;S;If_B_then_S;B;IsBuilder;S;For_S;S;C;Attack;Strongest



for(Unit u){
	if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
		u.harvest()
	} else {
		for(Unit u){
			u.train(Worker,Down)
		}
	}
	if(u.isBuilder()) then {
		for(Unit u){
			u.attack(Strongest)
		}
	}
}
FIM
