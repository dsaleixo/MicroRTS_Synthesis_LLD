Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Base;Right;S;S_S;S;C;Attack;Closest;S;S_S;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Strongest;S;For_S;S;C;Build;Heavy;Down
Atual=S;For_S;S;For_S;S;S_S;S;C;Attack;Closest;S;S_S;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Weakest;S;For_S;S;C;Build;Base;Up
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;C;Harvest;S;C;Attack;Weakest;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;For_S;S;C;Harvest;S;C;Attack;Weakest;S;S_S;S;For_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Weakest



for(Unit u){
	for(Unit u){
		if(HaveQtdUnitsAttacking(2)) then {
			for(Unit u){
				u.harvest()
			}
		} else {
			u.attack(Weakest)
		}
		for(Unit u){
			u.train(Worker,Up)
		}
		u.moveToUnit(Enemy,Weakest)
	}
}
FIM
