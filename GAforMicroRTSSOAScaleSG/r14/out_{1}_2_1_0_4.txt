Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;10;S;C;Attack;Weakest;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Train;Worker;Down;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;50;S;For_S;S;C;Build;Base;Down
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Train;Worker;Down;S;Empty
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Train;Worker;Right;S;Empty
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;is_Type;Base;S;For_S;S;C;Train;Worker;Right;S;Empty
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;is_Type;Base;S;For_S;S;C;Train;Worker;Up;S;Empty
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;For_S;S;C;Train;Worker;Up;S;Empty
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;For_S;S;C;Train;Worker;Up;S;Empty
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;For_S;S;C;Train;Worker;Down;S;Empty
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;For_S;S;C;Train;Worker;Right;S;Empty
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Build;Light;Left;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;S_S;S;S_S;S;C;Attack;LessHealthy;S;C;Attack;Strongest;S;C;Train;Worker;Up;S;S_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Build;Light;Left;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Up;S;C;Harvest



for(Unit u){
	for(Unit u){
		if(HasNumberOfWorkersHarvesting(1)) then {
			u.attack(LessHealthy)
			u.train(Worker,Up)
		} else {
			u.harvest()
		}
	}
}
FIM
