Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Up;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Idle;S;C;Attack;Random;S;C;Harvest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Up;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Idle;S;C;Attack;Random;S;C;Harvest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Left;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;C;Harvest



for(Unit u){
	for(Unit u){
		for(Unit u){
			u.train(Worker,Left)
		}
		if(u.HasUnitThatKillsInOneAttack()) then {
			u.idle()
		} else {
			u.attack(Random)
		}
	}
	u.harvest()
}
FIM
