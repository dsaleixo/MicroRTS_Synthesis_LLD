Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Attack;LessHealthy;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;Empty;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;Empty;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Build;Heavy;Left;S;S_S;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Build;Heavy;Left;S;S_S;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;S_S;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Up;S;C;Harvest
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Train;Worker;Up;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;3;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Attack;Weakest;S;C;Harvest



for(Unit u){
	u.idle()
	for(Unit u){
		u.train(Worker,Up)
		if(HasNumberOfWorkersHarvesting(3)) then {
			u.attack(Weakest)
		}
	}
	u.harvest()
}
FIM
