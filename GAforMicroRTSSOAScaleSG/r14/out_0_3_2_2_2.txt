Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Harvest;S;S_S;S;C;MoveAway;S;For_S;S;C;Idle;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;For_S;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Idle;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;For_S;S;If_B_then_S;B;IsBuilder;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Harvest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;For_S;S;C;Train;Worker;Right;S;For_S;S;Empty;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Up;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;S_S;S;C;Harvest;S;S_S;S;C;Harvest;S;C;Idle;S;C;Attack;LessHealthy;S;C;Train;Worker;Up



for(Unit u){
	if(HaveQtdUnitsAttacking(2)) then {
		u.harvest()
	} else {
		u.attack(LessHealthy)
	}
	u.train(Worker,Up)
}
FIM
