Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S;B;HasLessNumberOfUnits;Barracks;10;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Harvest;S;C;MoveToUnit;Ally;Weakest;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Train;Worker;Down;S;C;Build;Base;Right



for(Unit u){
	for(Unit u){
		u.idle()
	}
	for(Unit u){
		for(Unit u){
			u.harvest()
			u.moveToUnit(Ally,Weakest)
		}
		if(u.HasUnitThatKillsInOneAttack()) then {
			u.train(Worker,Down)
			u.build(Base,Right)
		}
	}
}
FIM
