Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;Attack;Weakest;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;Attack;LessHealthy;S;S_S;S;S_S;S;For_S;S;C;Build;Base;Left;S;S_S;S;C;Idle;S;C;Idle;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;Attack;LessHealthy;S;S_S;S;S_S;S;For_S;S;For_S;S;C;Build;Barracks;Up;S;C;Train;Light;Right;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;Attack;LessHealthy;S;S_S;S;C;Attack;LessHealthy;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;C;Attack;LessHealthy;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Strongest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;S_S;S;C;Idle;S;C;Idle;S;C;MoveToUnit;Enemy;Random;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;MoveToUnit;Enemy;Random;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;MoveToUnit;Enemy;Random;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Idle;S;C;MoveToUnit;Enemy;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Heavy;Down
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S;B;HaveQtdUnitsAttacking;2;S;S_S;S;C;Harvest;S;C;Build;Worker;Up;S;C;Train;Worker;EnemyDir;S;C;Attack;LessHealthy



for(Unit u){
	if(u.isBuilder()) then {
		if(HaveQtdUnitsAttacking(2)) then {
			u.harvest()
		}
	} else {
		u.train(Worker,EnemyDir)
	}
	u.attack(LessHealthy)
}
FIM
