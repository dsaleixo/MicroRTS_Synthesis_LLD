Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;S_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Down;S;S_S;S;C;Attack;MostHealthy;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;S_S;S;C;Attack;Strongest;S;For_S;S;For_S;S;S_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;C;Build;Ranged;Right;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Build;Light;Up;S;C;Attack;MostHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;S_S;S;C;Attack;Strongest;S;For_S;S;For_S;S;S_S;S;C;Build;Ranged;Right;S;C;Train;Worker;EnemyDir;S;C;Attack;MostHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Attack;Strongest;S;For_S;S;For_S;S;S_S;S;C;Build;Ranged;Right;S;C;Train;Worker;EnemyDir;S;C;Attack;MostHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Attack;Strongest;S;For_S;S;For_S;S;C;Train;Worker;Left;S;C;Attack;MostHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;C;Attack;Strongest;S;For_S;S;For_S;S;C;Train;Worker;Left;S;C;Attack;MostHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;C;Attack;Strongest;S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;For_S;S;C;Train;Worker;Left;S;Empty
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;C;Attack;Strongest;S;For_S;S;If_B_then_S;B;HasLessNumberOfUnits;Worker;10;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;For_S;S;C;Train;Worker;Left;S;Empty
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;C;Attack;Strongest;S;For_S;S;If_B_then_S;B;HasLessNumberOfUnits;Worker;10;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;For_S;S;C;Train;Worker;Left;S;Empty
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;If_B_then_S;B;HasLessNumberOfUnits;Worker;10;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;Empty;S;Empty
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;If_B_then_S;B;HasLessNumberOfUnits;Worker;10;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;Empty;S;Empty
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;If_B_then_S;B;HasLessNumberOfUnits;Worker;10;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;For_S;S;C;Harvest;S;Empty;S;Empty
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Weakest;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;C;Harvest;S;S_S;S;S_S;S;For_S;S;C;Idle;S;C;Idle;S;For_S;S;For_S;S;If_B_then_S;B;is_Type;Barracks;S;C;Build;Light;Down
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanHarvest;S;S_S;S;C;Harvest;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;C;Harvest;S;For_S;S;C;Idle



for(Unit u){
	if(u.canHarvest()) then {
		u.harvest()
		for(Unit u){
			u.train(Worker,EnemyDir)
			u.attack(Weakest)
		}
	}
	if(u.canAttack()) then {
		e
	} else {
		for(Unit u){
			u.idle()
		}
	}
}
FIM
