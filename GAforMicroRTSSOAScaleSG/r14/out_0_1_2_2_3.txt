Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Harvest;S;C;MoveAway;S;S_S;S;S_S;S;C;MoveAway;S;C;Train;Worker;Down;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;C;Train;Worker;Down;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;C;Attack;LessHealthy;S;S_S;S;C;Harvest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;For_S;S;C;Harvest;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;S_S;S;For_S;S;C;Harvest;S;C;Build;Base;Down;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Right



for(Unit u){
	for(Unit u){
		if(HaveQtdUnitsAttacking(2)) then {
			for(Unit u){
				u.harvest()
			}
		} else {
			u.attack(LessHealthy)
		}
	}
	for(Unit u){
		u.train(Worker,Right)
	}
}
FIM
