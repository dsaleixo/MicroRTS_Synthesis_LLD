Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Left
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;C;Train;Worker;Left
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Build;Base;Up;S;C;Train;Light;EnemyDir;S;S_S;S;C;Attack;LessHealthy;S;S_S;S;C;Attack;Closest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;S_S;S;C;Build;Heavy;Right;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Build;Light;Right;S;C;Build;Heavy;Right;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;S_S;S;C;Build;Light;Right;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;3;S;C;Attack;LessHealthy;S;S_S;S;S_S;S;C;Train;Base;Up;S;C;Idle;S;S_S;S;C;MoveToUnit;Enemy;Weakest;S;C;MoveToUnit;Enemy;Weakest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;S_S;S;C;MoveToUnit;Enemy;Weakest;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;3;S;C;Attack;LessHealthy;S;S_S;S;C;MoveToUnit;Enemy;Weakest;S;C;MoveToUnit;Enemy;Weakest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;C;MoveToUnit;Enemy;Weakest;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;3;S;C;Attack;LessHealthy;S;S_S;S;C;MoveToUnit;Enemy;Weakest;S;C;MoveToUnit;Enemy;Weakest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;C;MoveToUnit;Enemy;Weakest;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;3;S;C;Attack;LessHealthy;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Weakest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;For_S;S;C;Idle;S;S_S;S;C;Idle;S;C;Build;Light;Up;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;3;S;C;Attack;LessHealthy;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;For_S;S;C;Idle;S;C;Build;Light;Up;S;S_S;S;C;Idle;S;S_S;S;C;MoveAway;S;C;Harvest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;3;S;C;Attack;LessHealthy;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;Empty;S;Empty;S;C;Idle;S;If_B_then_S_else_S;B;IsBuilder;S;C;Attack;LessHealthy;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;S_S;S;S_S;S;C;Idle;S;C;Train;Heavy;Down;S;S_S;S;C;Harvest;S;C;MoveToUnit;Ally;Closest;S;S_S;S;S_S;S;C;Build;Light;EnemyDir;S;C;Harvest;S;C;MoveToUnit;Enemy;Closest;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;IsBuilder;S;C;Attack;Farthest;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Attack;Farthest;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Farthest
Atual=S;For_S;S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;MostHealthy
Atual=S;For_S;S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;C;Harvest;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;C;Build;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;C;Build;Worker;Left;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;C;Build;Worker;Left;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;C;Train;Worker;Right;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;S_S;S;C;Train;Worker;Left;S;C;Attack;Random
Atual=S;For_S;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;S_S;S;C;Train;Worker;Left;S;C;Attack;MostHealthy
Atual=S;For_S;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;S_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;S_S;S;C;Train;Worker;Left;S;C;Attack;MostHealthy



for(Unit u){
	for(Unit u){
		if(HaveQtdUnitsAttacking(3)) then {
			u.harvest()
		} else {
			u.attack(Strongest)
			if(u.HasUnitInOpponentRange()) then {
				e
			} else {
				u.train(Worker,Left)
			}
		}
	}
}
FIM
