Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;C;Build;Heavy;Right;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;C;Build;Light;EnemyDir;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;C;Idle;S;S_S;S;C;Harvest;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;C;Idle;S;S_S;S;S_S;S;C;Attack;Random;S;C;Idle;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;C;Build;Heavy;Left;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;S_S;S;For_S;S;C;Build;Barracks;Down;S;C;Build;Heavy;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;C;Build;Light;Left;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;C;Build;Ranged;Up;S;If_B_then_S;B;CanAttack;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;C;MoveToUnit;Enemy;Strongest;S;If_B_then_S_else_S;B;IsBuilder;S;C;Idle;S;C;MoveAway
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;Harvest;S;C;Build;Heavy;Left;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;S_S;S;C;Build;Heavy;Left;S;C;Attack;Closest;S;For_S;S;For_S;S;S_S;S;C;Build;Heavy;Down;S;C;Build;Light;Left
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Build;Light;EnemyDir
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Idle;S;C;Harvest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;S_S;S;C;Idle;S;C;Harvest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Train;Worker;Down;S;C;Train;Light;Down;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Attack;Weakest;S;C;Train;Base;EnemyDir;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Attack;Weakest;S;Empty;S;For_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;is_Type;Worker;S;C;Harvest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Attack;Strongest;S;Empty;S;For_S;S;C;Train;Worker;Right;S;If_B_then_S;B;is_Type;Worker;S;C;Harvest
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Attack;Strongest;S;Empty;S;For_S;S;C;Train;Worker;Right;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;Train;Base;Down;S;S_S;S;C;Build;Ranged;Up;S;S_S;S;C;Idle;S;C;Harvest
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;C;Attack;Strongest;S;Empty;S;For_S;S;C;Train;Worker;Left;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;C;Attack;Strongest;S;Empty;S;C;Harvest;S;For_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;C;Harvest;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;S_S;S;C;Attack;Strongest;S;C;Harvest;S;Empty;S;C;Harvest;S;For_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;LessHealthy



for(Unit u){
	for(Unit u){
		if(HasNumberOfWorkersHarvesting(1)) then {
			u.attack(Strongest)
		} else {
			e
		}
		u.harvest()
	}
	for(Unit u){
		u.train(Worker,EnemyDir)
	}
}
FIM
