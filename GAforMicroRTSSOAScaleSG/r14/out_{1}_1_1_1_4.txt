Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Ranged;Down;S;S_S;S;C;Idle;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Down;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;5;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;5;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;MoveToUnit;Enemy;LessHealthy
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Build;Worker;Down;S;C;Attack;LessHealthy;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;CanAttack;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;If_B_then_S;B;is_Type;Base;S;S_S;S;For_S;S;C;MoveToUnit;Enemy;LessHealthy;S;C;MoveToUnit;Ally;Closest
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;MoveToUnit;Enemy;Random;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;C;Attack;MostHealthy;S;C;Train;Worker;Up;S;If_B_then_S;B;CanAttack;S;If_B_then_S;B;IsBuilder;S;S_S;S;S_S;S;C;Idle;S;C;Harvest;S;S_S;S;C;Build;Light;Left;S;C;Idle
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;MoveToUnit;Enemy;Random;S;C;Train;Worker;Up;S;If_B_then_S;B;CanAttack;S;C;Harvest
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;MoveToUnit;Enemy;Random;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;MoveToUnit;Enemy;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;Random;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;Random;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;Closest;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;Closest;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;Closest;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;Closest;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;Closest;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;Closest;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;Closest;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;LessHealthy;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;LessHealthy;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;LessHealthy;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;LessHealthy;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;If_B_then_S;B;is_Type;Heavy;S;Empty;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;C;Idle;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Random



for(Unit u){
	for(Unit u){
		for(Unit u){
			if(HasNumberOfWorkersHarvesting(4)) then {
				u.idle()
			} else {
				u.harvest()
			}
			u.train(Worker,Up)
			u.attack(Random)
		}
	}
}
FIM
