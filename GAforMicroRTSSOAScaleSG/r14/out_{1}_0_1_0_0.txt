Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Harvest;S;For_S;S;C;Attack;Random;S;S_S;S;C;Train;Base;Down;S;S_S;S;C;Attack;Weakest;S;C;Harvest;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;C;Harvest;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;EnemyDir



for(Unit u){
	if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
		u.harvest()
		for(Unit u){
			u.attack(Closest)
		}
	}
	for(Unit u){
		u.train(Worker,EnemyDir)
	}
}
FIM
