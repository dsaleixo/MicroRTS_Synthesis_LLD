Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Idle;S;For_S;S;C;Train;Worker;Up;S;If_B_then_S_else_S;B;CanAttack;S;C;Attack;Strongest;S;C;Idle
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;C;Idle;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;0;S;C;Attack;Closest;S;C;Attack;MostHealthy;S;For_S;S;C;Train;Worker;Up;S;If_B_then_S_else_S;B;is_Type;Ranged;S;S_S;S;For_S;S;C;MoveToUnit;Enemy;Weakest;S;C;MoveToUnit;Enemy;Strongest;S;If_B_then_S;B;CanHarvest;S;For_S;S;C;Harvest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;C;Idle;S;C;Attack;MostHealthy;S;For_S;S;C;Train;Worker;Up;S;If_B_then_S_else_S;B;is_Type;Ranged;S;S_S;S;For_S;S;C;MoveToUnit;Enemy;Weakest;S;C;MoveToUnit;Enemy;Strongest;S;If_B_then_S;B;CanHarvest;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;For_S;S;C;MoveToUnit;Enemy;Strongest;S;S_S;S;S_S;S;C;Harvest;S;C;MoveAway;S;S_S;S;C;Harvest;S;C;Build;Base;Right



for(Unit u){
	if(u.HasUnitInOpponentRange()) then {
		for(Unit u){
			u.idle()
		}
	} else {
		u.attack(MostHealthy)
	}
	for(Unit u){
		u.train(Worker,Up)
	}
	if(u.is(Ranged)) then {
		for(Unit u){
			u.moveToUnit(Enemy,Weakest)
		}
		u.moveToUnit(Enemy,Strongest)
	} else {
		if(u.canHarvest()) then {
			for(Unit u){
				if(HasNumberOfWorkersHarvesting(1)) then {
					for(Unit u){
						u.moveToUnit(Enemy,Strongest)
					}
				} else {
					u.harvest()
				}
			}
		}
	}
}
FIM
