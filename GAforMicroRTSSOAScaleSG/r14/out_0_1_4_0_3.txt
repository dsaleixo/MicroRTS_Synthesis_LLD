Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Attack;LessHealthy;S;S_S;S;C;Harvest;S;C;MoveToUnit;Ally;Closest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Attack;Strongest;S;S_S;S;S_S;S;For_S;S;C;Build;Barracks;Up;S;S_S;S;C;Harvest;S;C;Train;Heavy;Left;S;For_S;S;S_S;S;C;Train;Base;Down;S;For_S;S;C;Train;Light;Left;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Attack;Strongest;S;S_S;S;S_S;S;For_S;S;C;Build;Barracks;Up;S;C;Harvest;S;For_S;S;For_S;S;C;Train;Light;Down;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Attack;Strongest;S;S_S;S;S_S;S;For_S;S;C;MoveToUnit;Enemy;Weakest;S;C;Attack;Closest;S;For_S;S;For_S;S;Empty;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;S_S;S;C;Train;Ranged;Up;S;C;Harvest;S;S_S;S;C;Attack;Closest;S;For_S;S;C;Harvest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Idle;S;C;Attack;Weakest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Attack;LessHealthy;S;S_S;S;C;Idle;S;C;Harvest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Attack;LessHealthy;S;C;Harvest



for(Unit u){
	u.train(Worker,Down)
	for(Unit u){
		if(HasNumberOfWorkersHarvesting(2)) then {
			u.attack(LessHealthy)
		} else {
			u.harvest()
		}
	}
}
FIM
