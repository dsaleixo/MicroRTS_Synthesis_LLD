Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Idle;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Heavy;Down;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Light;Down;S;S_S;S;C;Build;Heavy;Down;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Light;Down;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfUnits;Base;50;S;C;Attack;MostHealthy;S;C;Train;Worker;Down;S;For_S;S;C;Build;Heavy;Right;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;For_S;S;C;Build;Light;Up;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Build;Heavy;EnemyDir;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Build;Light;EnemyDir;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Harvest;S;C;Train;Worker;Up;S;S_S;S;C;Idle;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Harvest;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Harvest;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Train;Base;Right;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Barracks;4;S;C;Idle;S;C;Idle;S;S_S;S;For_S;S;S_S;S;S_S;S;C;Train;Light;Left;S;C;Train;Light;Right;S;S_S;S;C;Harvest;S;C;Attack;LessHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;S_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;C;Idle;S;C;Attack;LessHealthy;S;C;Train;Worker;Up



for(Unit u){
	for(Unit u){
		u.idle()
	}
	for(Unit u){
		if(HaveQtdUnitsAttacking(3)) then {
			u.harvest()
		} else {
			e
		}
		u.attack(LessHealthy)
	}
	u.train(Worker,Up)
}
FIM
