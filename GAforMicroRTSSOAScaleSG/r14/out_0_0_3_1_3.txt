Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Attack;Strongest;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Train;Worker;Left;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Harvest;S;C;Train;Ranged;EnemyDir;S;C;Train;Worker;Up;S;S_S;S;C;MoveAway;S;S_S;S;C;Idle;S;C;Attack;Weakest
Atual=S;S_S;S;For_S;S;C;Train;Worker;Left;S;For_S;S;S_S;S;C;Attack;Closest;S;C;Build;Light;EnemyDir
Atual=S;S_S;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Left;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Idle;S;C;Harvest;S;If_B_then_S_else_S;B;HasNumberOfUnits;Ranged;50;S;C;Harvest;S;C;Attack;Random
Atual=S;S_S;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Left;S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;For_S;S;C;Train;Light;Right;S;S_S;S;C;MoveToUnit;Enemy;Random;S;C;Attack;Weakest;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Heavy;2;S;C;Idle;S;C;Idle;S;C;Harvest;S;C;Attack;Random
Atual=S;S_S;S;For_S;S;C;Train;Worker;Left;S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;C;Attack;Weakest;S;Empty;S;C;Harvest



for(Unit u){
	u.train(Worker,Left)
}
for(Unit u){
	for(Unit u){
		if(HasNumberOfWorkersHarvesting(4)) then {
			u.idle()
			u.attack(Weakest)
		} else {
			e
		}
		u.harvest()
	}
}
FIM
