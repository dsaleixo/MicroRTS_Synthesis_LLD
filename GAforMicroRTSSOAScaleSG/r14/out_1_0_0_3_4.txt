Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;For_S;S;C;Train;Light;Up;S;S_S;S;C;Train;Worker;Left;S;C;Build;Ranged;Left;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;For_S;S;C;Train;Base;Left;S;S_S;S;C;Train;Worker;Left;S;C;Build;Light;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;For_S;S;C;Train;Worker;Down;S;S_S;S;C;Train;Worker;Left;S;C;Build;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;For_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Train;Worker;Left;S;C;Build;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Train;Ranged;Left;S;S_S;S;C;Attack;Farthest;S;If_B_then_S_else_S;B;is_Type;Worker;S;For_S;S;For_S;S;C;Harvest;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;3;S;For_S;S;C;Idle;S;C;Attack;LessHealthy



for(Unit u){
	for(Unit u){
		for(Unit u){
			u.train(Worker,EnemyDir)
			u.train(Ranged,Left)
		}
	}
	u.attack(Farthest)
	if(u.is(Worker)) then {
		for(Unit u){
			for(Unit u){
				u.harvest()
			}
		}
	} else {
		if(u.HasUnitWithinDistanceFromOpponent(3)) then {
			for(Unit u){
				u.idle()
			}
		}
	}
	u.attack(LessHealthy)
}
FIM
