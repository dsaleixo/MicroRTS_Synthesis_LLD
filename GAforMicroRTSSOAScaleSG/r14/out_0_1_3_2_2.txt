Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;S_S;S;For_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;LessHealthy
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;For_S;S;S_S;S;S_S;S;C;MoveAway;S;C;Attack;LessHealthy;S;S_S;S;C;Train;Worker;Left;S;C;Idle
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Idle;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Build;Base;Down;S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;S_S;S;C;Idle;S;C;Harvest;S;C;Attack;Farthest;S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;S_S;S;C;Idle;S;C;Build;Worker;Right;S;C;Attack;Farthest;S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Attack;Random;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;C;Build;Worker;Right;S;C;Attack;MostHealthy;S;For_S;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Barracks;3;S;C;Attack;Random;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;C;Build;Worker;Right;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;C;MoveAway;S;C;Attack;Random;S;For_S;S;S_S;S;S_S;S;For_S;S;C;Idle;S;For_S;S;C;MoveAway;S;C;Train;Worker;Up



for(Unit u){
	if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
		u.moveAway()
		u.attack(Random)
	} else {
		for(Unit u){
			for(Unit u){
				u.idle()
			}
			for(Unit u){
				u.moveAway()
			}
			u.train(Worker,Up)
		}
	}
}
FIM
