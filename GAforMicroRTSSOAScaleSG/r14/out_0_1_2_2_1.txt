Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;LessHealthy;S;S_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Farthest;S;C;Train;Base;Left
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;LessHealthy;S;C;Train;Worker;Up
Atual=S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Worker;5;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;LessHealthy;S;C;Train;Worker;Up;S;For_S;S;For_S;S;S_S;S;C;Harvest;S;C;Idle
Atual=S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Worker;5;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Harvest;S;C;Train;Worker;Up;S;For_S;S;For_S;S;C;Attack;MostHealthy
Atual=S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Worker;5;S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Harvest;S;C;Train;Worker;Up;S;For_S;S;For_S;S;C;Attack;Random
Atual=S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Worker;5;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;C;Attack;Random
Atual=S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Worker;5;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;C;Attack;Random
Atual=S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Worker;5;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;C;Attack;Random
Atual=S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Worker;5;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Worker;5;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;S_S;S;C;MoveAway;S;C;Idle;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;S_S;S;C;Harvest;S;C;MoveAway;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;If_B_then_S;B;HasUnitInOpponentRange;S;C;Build;Base;Left;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;C;Harvest;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;5;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;0;S;C;MoveToUnit;Enemy;Weakest;S;C;MoveAway;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;C;Harvest;S;C;Attack;Weakest



for(Unit u){
	if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
		for(Unit u){
			u.train(Worker,Up)
		}
	} else {
		for(Unit u){
			for(Unit u){
				if(HasNumberOfWorkersHarvesting(5)) then {
					u.moveToUnit(Enemy,Weakest)
				} else {
					if(HaveQtdUnitsAttacking(2)) then {
						u.harvest()
					} else {
						u.attack(Weakest)
					}
				}
			}
		}
	}
}
FIM
