Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;S_S;S;For_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Up;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;S_S;S;C;Build;Ranged;Right;S;C;Build;Light;Down
Atual=S;S_S;S;For_S;S;S_S;S;For_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Up



for(Unit u){
	for(Unit u){
		if(HaveQtdUnitsAttacking(3)) then {
			u.harvest()
		}
	}
	u.attack(LessHealthy)
}
for(Unit u){
	u.train(Worker,Up)
}
FIM
