Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Farthest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;MostHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;MoveToUnit;Ally;MostHealthy;S;For_S;S;C;Attack;Weakest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Weakest;S;C;Idle
Atual=S;For_S;S;S_S;S;C;Attack;Farthest;S;S_S;S;For_S;S;C;Attack;Weakest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Heavy;Down;S;C;Attack;LessHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Light;Down;S;C;Attack;Weakest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;S_S;S;C;Build;Light;Down;S;C;Attack;Weakest;S;C;Harvest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;S_S;S;C;Idle;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Harvest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;S_S;S;C;Attack;Strongest;S;C;Harvest;S;C;Harvest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Attack;Strongest;S;C;Harvest;S;For_S;S;C;Train;Worker;Up;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Strongest;S;S_S;S;C;Train;Heavy;Up;S;C;MoveToUnit;Enemy;Closest;S;C;Harvest;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Up



for(Unit u){
	if(u.HasUnitWithinDistanceFromOpponent(10)) then {
		if(u.canHarvest()) then {
			u.attack(Strongest)
		} else {
			u.moveToUnit(Enemy,Closest)
		}
	} else {
		u.harvest()
	}
	for(Unit u){
		if(u.HasUnitThatKillsInOneAttack()) then {
			u.train(Worker,Up)
		}
	}
}
FIM
