Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Idle;S;If_B_then_S_else_S;B;CanAttack;S;C;Build;Ranged;Right;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Random;S;If_B_then_S_else_S;B;CanAttack;S;Empty;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;MostHealthy;S;If_B_then_S_else_S;B;is_Type;Light;S;Empty;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;S_S;S;C;Harvest;S;C;Attack;Weakest;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;1;S;C;Harvest;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;If_B_then_S_else_S;B;CanAttack;S;C;Harvest;S;C;Harvest;S;S_S;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;0;S;C;Attack;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;3;S;S_S;S;C;Harvest;S;If_B_then_S_else_S;B;CanAttack;S;C;Build;Heavy;Left;S;C;MoveAway;S;S_S;S;S_S;S;S_S;S;C;Attack;Farthest;S;For_S;S;C;Idle;S;S_S;S;For_S;S;C;Build;Base;Left;S;For_S;S;C;Idle;S;C;Train;Worker;Up



for(Unit u){
	if(HaveQtdUnitsAttacking(3)) then {
		u.harvest()
	}
	u.attack(Farthest)
	for(Unit u){
		u.idle()
	}
	u.train(Worker,Up)
}
FIM
