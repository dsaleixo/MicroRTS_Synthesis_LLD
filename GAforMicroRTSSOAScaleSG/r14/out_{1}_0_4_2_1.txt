Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Idle;S;C;MoveAway;S;C;Attack;Farthest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Idle;S;C;Attack;Weakest;S;C;Attack;Farthest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Ranged;Down;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Heavy;Down;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Light;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;If_B_then_S;B;HasLessNumberOfUnits;Light;50;S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Train;Worker;Right;S;If_B_then_S;B;IsBuilder;S;C;Harvest;S;C;Attack;Strongest



for(Unit u){
	u.idle()
	for(Unit u){
		for(Unit u){
			u.idle()
			u.train(Worker,Right)
			if(u.isBuilder()) then {
				u.harvest()
			}
		}
	}
	u.attack(Strongest)
}
FIM
