Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Barracks;Up;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;Idle;S;C;Attack;MostHealthy;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Build;Worker;EnemyDir;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Harvest;S;For_S;S;C;Train;Worker;Right;S;If_B_then_S;B;HasNumberOfUnits;Worker;3;S;For_S;S;S_S;S;C;Attack;Strongest;S;C;Build;Ranged;Left
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;If_B_then_S;B;HasLessNumberOfUnits;Base;1;S;C;MoveToUnit;Enemy;Weakest;S;S_S;S;C;Idle;S;C;Harvest;S;S_S;S;C;MoveAway;S;For_S;S;C;Train;Worker;Right;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Attack;Strongest



for(Unit u){
	if(HasLessNumberOfUnits(Base,1)) then {
		u.moveToUnit(Enemy,Weakest)
	}
	u.harvest()
	for(Unit u){
		u.train(Worker,Right)
	}
	if(u.canAttack()) then {
		for(Unit u){
			u.attack(Strongest)
		}
	}
}
FIM
