Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;C;Idle;S;For_S;S;C;MoveToUnit;Enemy;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Closest;S;C;Idle;S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Harvest
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Light;Right
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Train;Worker;EnemyDir;S;C;Build;Light;Right
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Idle;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Worker;Left;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Idle;S;S_S;S;For_S;S;C;Harvest;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Idle;S;S_S;S;C;MoveToUnit;Enemy;MostHealthy;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;For_S;S;C;MoveAway;S;S_S;S;C;Idle;S;C;Harvest;S;S_S;S;C;MoveToUnit;Enemy;MostHealthy;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;If_B_then_S;B;CanAttack;S;S_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;For_S;S;C;MoveAway;S;C;Harvest;S;S_S;S;C;MoveToUnit;Enemy;MostHealthy;S;C;Train;Worker;EnemyDir



for(Unit u){
	if(u.canAttack()) then {
		u.attack(Closest)
		for(Unit u){
			if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
				if(u.OpponentHasUnitInPlayerRange()) then {
					for(Unit u){
						u.moveAway()
					}
				} else {
					u.harvest()
				}
			} else {
				u.moveToUnit(Enemy,MostHealthy)
				u.train(Worker,EnemyDir)
			}
		}
	}
}
FIM
