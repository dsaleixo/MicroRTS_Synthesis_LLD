Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Up;S;S_S;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;Random;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Train;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Idle;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;S_S;S;C;Build;Ranged;Down;S;C;Attack;Closest;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Idle;S;C;Harvest;S;C;Train;Worker;Up;S;C;MoveToUnit;Ally;Random
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;S_S;S;C;Train;Ranged;Up;S;C;Attack;Closest;S;C;Harvest;S;C;Train;Worker;Up;S;C;MoveToUnit;Ally;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Train;Light;Up;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Attack;Closest;S;C;Harvest;S;C;Train;Worker;Up;S;C;MoveToUnit;Ally;Random



for(Unit u){
	if(HasNumberOfWorkersHarvesting(1)) then {
		u.moveToUnit(Enemy,LessHealthy)
	} else {
		if(u.HasUnitWithinDistanceFromOpponent(25)) then {
			u.attack(Closest)
		} else {
			u.harvest()
		}
		u.train(Worker,Up)
		u.moveToUnit(Ally,Random)
	}
}
FIM
