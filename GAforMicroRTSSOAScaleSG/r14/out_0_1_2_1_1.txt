Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;C;Train;Light;Down;S;C;Attack;Random;S;S_S;S;C;Train;Worker;Down;S;C;MoveAway
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Attack;Random;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Attack;Random;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Attack;Random;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Random;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Random;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Random;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Random;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Random;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Random;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Random;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;is_Type;Worker;S;C;Attack;Random;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;is_Type;Worker;S;C;Attack;Closest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Build;Ranged;Left;S;C;Idle;S;C;Harvest;S;If_B_then_S_else_S;B;is_Type;Worker;S;C;Attack;Closest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Harvest;S;C;Idle;S;C;Attack;Farthest;S;If_B_then_S_else_S;B;is_Type;Worker;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;Down



for(Unit u){
	u.harvest()
	if(u.is(Worker)) then {
		for(Unit u){
			u.attack(Closest)
		}
	} else {
		u.train(Worker,Down)
	}
}
FIM
