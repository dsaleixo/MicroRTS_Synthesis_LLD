Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Right;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;HasLessNumberOfUnits;Base;25;S;C;Build;Heavy;Down;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfUnits;Ranged;3;S;C;MoveToUnit;Ally;Weakest;S;C;Train;Worker;Right;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Base;Left;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfUnits;Ranged;3;S;C;MoveToUnit;Ally;Weakest;S;C;Train;Worker;Right;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;5;S;S_S;S;C;Train;Heavy;EnemyDir;S;C;Attack;Strongest;S;S_S;S;C;Harvest;S;C;Attack;MostHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;S_S;S;C;Attack;Strongest;S;C;MoveAway;S;S_S;S;C;Harvest;S;C;Attack;MostHealthy;S;C;Train;Worker;Up



for(Unit u){
	for(Unit u){
		if(HasNumberOfWorkersHarvesting(1)) then {
			u.attack(Strongest)
		} else {
			u.harvest()
		}
	}
	u.train(Worker,Up)
}
FIM
