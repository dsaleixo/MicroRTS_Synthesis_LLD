Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Build;Heavy;Right;S;C;Train;Worker;Down;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Build;Light;Right;S;C;Train;Worker;Down;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Build;Heavy;Up;S;C;Train;Worker;Right;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Build;Worker;Right;S;C;Train;Worker;Down;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;If_B_then_S;B;OpponentHasNumberOfUnits;Base;50;S;C;Idle;S;S_S;S;C;Idle;S;C;Harvest;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;S_S;S;C;Idle;S;C;Harvest;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanAttack;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;C;Train;Worker;Down;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanAttack;S;If_B_then_S;B;HaveQtdUnitsAttacking;3;S;If_B_then_S;B;CanHarvest;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Weakest



for(Unit u){
	if(u.canAttack()) then {
		if(HaveQtdUnitsAttacking(3)) then {
			u.harvest()
		}
	} else {
		u.train(Worker,Up)
	}
	u.attack(Weakest)
}
FIM
