Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Train;Worker;Right;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;Empty;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;Empty;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;Empty;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;C;Harvest;S;S_S;S;C;MoveToUnit;Enemy;Closest;S;S_S;S;C;Train;Light;EnemyDir;S;C;Build;Ranged;Down;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Train;Ranged;Down;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;C;Harvest;S;S_S;S;C;MoveToUnit;Enemy;Closest;S;C;Train;Light;EnemyDir;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;C;Harvest;S;S_S;S;C;MoveToUnit;Enemy;Closest;S;C;Train;Light;EnemyDir;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;C;Harvest;S;S_S;S;C;Train;Heavy;Right;S;C;Idle;S;C;Attack;MostHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Left;S;C;Train;Heavy;Right
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Left;S;Empty
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Right;S;Empty
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Up;S;Empty
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;S_S;S;C;Attack;MostHealthy;S;C;MoveToUnit;Ally;Closest;S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Up;S;Empty
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;C;Harvest;S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Up;S;Empty



for(Unit u){
	if(u.OpponentHasUnitInPlayerRange()) then {
		u.attack(LessHealthy)
	} else {
		if(u.canAttack()) then {
			u.harvest()
			for(Unit u){
				for(Unit u){
					u.attack(Closest)
				}
				for(Unit u){
					u.train(Worker,Up)
				}
			}
		} else {
			e
		}
	}
}
FIM
