Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;MoveAway;S;C;Idle;S;For_S;S;C;Attack;Weakest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;If_B_then_S;B;HaveQtdUnitsAttacking;1;S;C;Harvest;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Closest;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Barracks;Right;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;For_S;S;C;Harvest;S;S_S;S;C;Idle;S;C;Attack;LessHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;For_S;S;C;Harvest;S;S_S;S;C;Idle;S;C;Attack;MostHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;For_S;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Ranged;0;S;C;Harvest;S;C;Attack;Strongest;S;S_S;S;C;Attack;Closest;S;If_B_then_S;B;HasLessNumberOfUnits;Light;10;S;C;Attack;MostHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;2;S;S_S;S;For_S;S;C;Harvest;S;C;Idle;S;C;Attack;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;HasLessNumberOfUnits;Ranged;3;S;S_S;S;C;Harvest;S;C;Build;Heavy;EnemyDir;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Up



for(Unit u){
	for(Unit u){
		for(Unit u){
			u.harvest()
			if(u.canAttack()) then {
				for(Unit u){
					u.attack(LessHealthy)
				}
			}
		}
		u.train(Worker,Up)
	}
}
FIM
