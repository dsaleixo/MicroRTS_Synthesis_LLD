Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Harvest;S;S_S;S;C;MoveAway;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;C;Build;Ranged;Left;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Base;Down;S;S_S;S;S_S;S;C;Harvest;S;C;Train;Worker;Right;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;S_S;S;C;Train;Base;Down;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;MoveToUnit;Enemy;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;MoveToUnit;Enemy;Farthest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;MoveToUnit;Enemy;MostHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;MoveToUnit;Enemy;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;MoveToUnit;Enemy;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;MoveToUnit;Enemy;Farthest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;MoveToUnit;Enemy;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Train;Light;EnemyDir;S;S_S;S;C;Harvest;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;S_S;S;C;Build;Barracks;EnemyDir;S;C;Harvest;S;S_S;S;C;Train;Light;Left;S;S_S;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Harvest
Atual=S;S_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;S_S;S;C;Build;Barracks;EnemyDir;S;C;Harvest;S;S_S;S;C;Train;Light;Left;S;C;MoveToUnit;Enemy;LessHealthy;S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;Farthest;S;C;Attack;Strongest



for(Unit u){
	u.idle()
	for(Unit u){
		u.build(Barracks,EnemyDir)
		u.harvest()
	}
	u.train(Light,Left)
	u.moveToUnit(Enemy,LessHealthy)
}
for(Unit u){
	if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
		e
	} else {
		u.attack(Strongest)
	}
}
FIM
