Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Attack;MostHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;C;Harvest;S;C;Train;Worker;Up;S;If_B_then_S;B;IsBuilder;S;If_B_then_S;B;CanAttack;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Heavy;50;S;C;Harvest;S;C;MoveToUnit;Enemy;Closest;S;C;Train;Worker;Up;S;If_B_then_S;B;IsBuilder;S;C;Attack;Weakest



for(Unit u){
	for(Unit u){
		if(HaveQtdUnitsAttacking(2)) then {
			if(HasLessNumberOfUnits(Heavy,50)) then {
				u.harvest()
			} else {
				u.moveToUnit(Enemy,Closest)
			}
		} else {
			u.train(Worker,Up)
		}
	}
	if(u.isBuilder()) then {
		u.attack(Weakest)
	}
}
FIM
