Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;MostHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Attack;Weakest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;C;Build;Heavy;Left;S;C;Attack;Weakest;S;C;Train;Worker;Right
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;C;Build;Light;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;C;Build;Light;Down;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;For_S;S;C;Build;Light;Left;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;For_S;S;C;Build;Heavy;Up;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Attack;Strongest;S;C;Harvest;S;C;Attack;Closest



for(Unit u){
	for(Unit u){
		for(Unit u){
			u.train(Worker,Right)
			for(Unit u){
				for(Unit u){
					if(HasNumberOfWorkersHarvesting(2)) then {
						u.attack(Strongest)
					} else {
						u.harvest()
					}
				}
			}
		}
	}
}
FIM
