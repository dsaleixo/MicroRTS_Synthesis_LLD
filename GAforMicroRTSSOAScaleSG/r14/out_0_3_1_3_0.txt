Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;For_S;S;If_B_then_S;B;CanAttack;S;If_B_then_S;B;CanHarvest;S;S_S;S;For_S;S;For_S;S;C;Train;Worker;Down;S;C;Build;Heavy;Down
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;For_S;S;If_B_then_S;B;CanAttack;S;S_S;S;S_S;S;For_S;S;For_S;S;C;Train;Worker;Down;S;C;Build;Light;Right;S;C;Build;Heavy;Down
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;For_S;S;If_B_then_S;B;OpponentHasNumberOfUnits;Worker;3;S;S_S;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;50;S;C;Attack;MostHealthy;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;For_S;S;S_S;S;C;Idle;S;S_S;S;C;Train;Worker;Right;S;C;Harvest



for(Unit u){
	u.attack(Strongest)
	for(Unit u){
		for(Unit u){
			u.idle()
			u.train(Worker,Right)
			u.harvest()
		}
	}
}
FIM
