Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Weakest
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;S_S;S;C;MoveToUnit;Enemy;Weakest;S;For_S;S;For_S;S;S_S;S;C;Idle;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;S_S;S;C;MoveToUnit;Enemy;Weakest;S;For_S;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;S_S;S;C;MoveToUnit;Enemy;Weakest;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;S_S;S;C;MoveToUnit;Enemy;Weakest;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;C;Harvest;S;C;Attack;Farthest;S;For_S;S;S_S;S;C;Train;Base;Right;S;C;Idle;S;For_S;S;S_S;S;C;MoveToUnit;Enemy;Weakest;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfUnits;Ranged;4;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;S_S;S;C;Attack;Random;S;C;Train;Barracks;Left;S;S_S;S;S_S;S;C;Attack;Weakest;S;C;Harvest;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;C;MoveToUnit;Enemy;Weakest;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;MoveToUnit;Enemy;Weakest;S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Ally;Closest
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;MoveToUnit;Enemy;Weakest;S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Harvest
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;MoveToUnit;Enemy;Weakest;S;For_S;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;MoveToUnit;Enemy;Weakest;S;For_S;S;For_S;S;If_B_then_S;B;OpponentHasNumberOfUnits;Worker;3;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Build;Light;EnemyDir;S;C;Build;Light;Down;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Ranged;25;S;C;MoveAway;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;Empty;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;Empty;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Light;50;S;Empty;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Attack;Closest;S;S_S;S;C;Train;Light;Up;S;C;Harvest;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;For_S;S;For_S;S;C;Harvest
Atual=S;S_S;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Attack;Closest;S;C;Harvest;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;S_S;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Attack;Closest;S;C;Harvest;S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;C;Build;Ranged;Up;S;For_S;S;C;Train;Worker;EnemyDir



for(Unit u){
	for(Unit u){
		if(HasNumberOfWorkersHarvesting(2)) then {
			u.attack(Closest)
		} else {
			u.harvest()
		}
	}
}
for(Unit u){
	for(Unit u){
		u.attack(Weakest)
	}
}
for(Unit u){
	u.train(Worker,EnemyDir)
}
FIM
