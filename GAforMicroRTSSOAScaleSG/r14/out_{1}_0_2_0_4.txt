Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;S_S;S;C;Attack;MostHealthy;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Ranged;Up;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Right;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;S_S;S;C;Attack;LessHealthy;S;C;Idle
Atual=S;For_S;S;S_S;S;C;Build;Ranged;Up;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Build;Light;Right;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;S_S;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;1;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy;S;If_B_then_S;B;HaveQtdUnitsAttacking;3;S;For_S;S;C;Harvest



for(Unit u){
	u.train(Worker,Up)
	u.attack(LessHealthy)
	if(HaveQtdUnitsAttacking(3)) then {
		for(Unit u){
			u.harvest()
		}
	}
}
FIM
