Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;If_B_then_S;B;HasLessNumberOfUnits;Heavy;10;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Harvest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;Empty;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;Empty;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;Empty;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;Empty;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;Empty;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;Empty;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;Closest;S;If_B_then_S;B;CanAttack;S;S_S;S;C;Harvest;S;C;Harvest
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;Closest;S;If_B_then_S;B;CanAttack;S;C;Harvest
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;For_S;S;C;Attack;Closest;S;If_B_then_S;B;CanAttack;S;C;Harvest



for(Unit u){
	for(Unit u){
		u.train(Worker,EnemyDir)
	}
	if(u.HasUnitWithinDistanceFromOpponent(2)) then {
		for(Unit u){
			for(Unit u){
				u.attack(Closest)
			}
		}
	} else {
		if(u.canAttack()) then {
			u.harvest()
		}
	}
}
FIM
