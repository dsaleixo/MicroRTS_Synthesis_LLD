Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;C;Attack;Closest;S;For_S;S;S_S;S;C;Harvest;S;C;MoveAway;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;C;Harvest;S;S_S;S;C;Attack;LessHealthy;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;C;Attack;LessHealthy;S;C;Harvest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Up;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;5;S;C;Idle;S;C;Harvest
Atual=S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Up;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;If_B_then_S;B;HasUnitInOpponentRange;S;C;Idle;S;C;Harvest



for(Unit u){
	if(u.canHarvest()) then {
		u.attack(LessHealthy)
	} else {
		for(Unit u){
			u.train(Worker,Up)
			if(HasNumberOfWorkersHarvesting(1)) then {
				if(u.HasUnitInOpponentRange()) then {
					u.idle()
				}
			} else {
				u.harvest()
			}
		}
	}
}
FIM
