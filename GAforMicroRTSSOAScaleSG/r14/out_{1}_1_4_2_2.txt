Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanAttack;S;C;MoveToUnit;Enemy;MostHealthy;S;C;Train;Worker;Down;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Build;Ranged;Down;S;C;Train;Worker;Down;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Build;Heavy;Up;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Build;Light;Up;S;C;Train;Worker;Right;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Build;Light;Up;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanAttack;S;C;Build;Light;Up;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Harvest;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;1;S;For_S;S;C;MoveToUnit;Ally;Random;S;If_B_then_S;B;IsBuilder;S;S_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Train;Worker;EnemyDir;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;S_S;S;C;Idle;S;C;Harvest



for(Unit u){
	if(u.HasUnitThatKillsInOneAttack()) then {
		u.harvest()
	} else {
		if(u.HasUnitWithinDistanceFromOpponent(1)) then {
			for(Unit u){
				u.moveToUnit(Ally,Random)
			}
		}
	}
	if(u.isBuilder()) then {
		for(Unit u){
			u.train(Worker,EnemyDir)
		}
		for(Unit u){
			u.attack(LessHealthy)
		}
	}
}
FIM
