Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;S_S;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;S_S;S;C;Attack;Strongest;S;S_S;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;For_S;S;C;Harvest;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;Attack;Strongest;S;S_S;S;S_S;S;C;Harvest;S;C;MoveAway;S;For_S;S;C;Idle;S;S_S;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;Attack;Strongest;S;S_S;S;C;Harvest;S;For_S;S;C;Idle;S;S_S;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Train;Worker;EnemyDir



for(Unit u){
	if(HasNumberOfWorkersHarvesting(1)) then {
		u.attack(Strongest)
	} else {
		u.harvest()
		for(Unit u){
			u.idle()
		}
	}
	u.moveToUnit(Enemy,LessHealthy)
	u.train(Worker,EnemyDir)
}
FIM
