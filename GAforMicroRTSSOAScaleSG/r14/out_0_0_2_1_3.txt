Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasLessNumberOfUnits;Worker;3;S;S_S;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;4;S;C;Idle;S;S_S;S;For_S;S;C;Harvest;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Attack;Closest;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Idle
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasLessNumberOfUnits;Worker;3;S;S_S;S;For_S;S;S_S;S;For_S;S;For_S;S;For_S;S;C;Train;Light;Right;S;If_B_then_S_else_S;B;HasNumberOfUnits;Heavy;0;S;C;Train;Worker;Right;S;C;Idle;S;If_B_then_S;B;CanAttack;S;S_S;S;For_S;S;C;Harvest;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Attack;Closest;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;0;S;For_S;S;C;Idle
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasLessNumberOfUnits;Light;1;S;S_S;S;S_S;S;For_S;S;C;Train;Worker;Right;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Harvest;S;For_S;S;C;Idle;S;S_S;S;C;Attack;Closest;S;For_S;S;C;Idle
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;For_S;S;C;Train;Worker;Right;S;If_B_then_S;B;CanAttack;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;If_B_then_S_else_S;B;CanAttack;S;C;Attack;Strongest;S;C;MoveToUnit;Enemy;Weakest;S;C;Harvest;S;For_S;S;C;Idle;S;C;Attack;Closest



for(Unit u){
	for(Unit u){
		u.train(Worker,Right)
	}
	if(u.canAttack()) then {
		for(Unit u){
			if(HasNumberOfWorkersHarvesting(4)) then {
				if(u.canAttack()) then {
					u.attack(Strongest)
				} else {
					u.moveToUnit(Enemy,Weakest)
				}
			} else {
				u.harvest()
			}
		}
	}
	for(Unit u){
		u.idle()
	}
}
FIM
