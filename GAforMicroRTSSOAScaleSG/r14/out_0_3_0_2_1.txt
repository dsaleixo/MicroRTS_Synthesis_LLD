Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;C;Train;Worker;Right;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Ranged;Up;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;MoveToUnit;Enemy;Weakest;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;IsBuilder;S;Empty;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S;B;HasLessNumberOfUnits;Light;10;S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Barracks;25;S;If_B_then_S;B;HasNumberOfUnits;Light;50;S;C;MoveToUnit;Enemy;LessHealthy;S;For_S;S;C;Harvest;S;S_S;S;If_B_then_S;B;is_Type;Base;S;For_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;CanHarvest;S;For_S;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;C;Harvest;S;S_S;S;If_B_then_S;B;is_Type;Base;S;For_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;CanHarvest;S;For_S;S;For_S;S;C;Attack;Weakest



for(Unit u){
	for(Unit u){
		u.harvest()
		if(u.is(Base)) then {
			for(Unit u){
				u.train(Worker,EnemyDir)
			}
		}
		if(u.canHarvest()) then {
			for(Unit u){
				for(Unit u){
					u.attack(Weakest)
				}
			}
		}
	}
}
FIM
