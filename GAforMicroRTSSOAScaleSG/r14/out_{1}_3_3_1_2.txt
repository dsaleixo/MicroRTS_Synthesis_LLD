Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Right;S;For_S;S;S_S;S;C;Attack;Closest;S;C;Idle
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;C;Train;Base;Left;S;S_S;S;C;Build;Heavy;Up;S;C;Attack;Closest;S;S_S;S;For_S;S;C;Train;Barracks;EnemyDir;S;For_S;S;C;Train;Heavy;Left;S;S_S;S;For_S;S;C;Attack;Closest;S;S_S;S;S_S;S;C;MoveToUnit;Ally;MostHealthy;S;C;Attack;Closest;S;C;Build;Base;Up
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;S_S;S;For_S;S;C;Idle;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Train;Barracks;Right;S;For_S;S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Worker;4;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Harvest;S;C;MoveToUnit;Enemy;Strongest



for(Unit u){
	for(Unit u){
		for(Unit u){
			for(Unit u){
				u.idle()
			}
			u.train(Worker,EnemyDir)
			for(Unit u){
				if(HasLessNumberOfUnits(Worker,4)) then {
					u.moveToUnit(Enemy,LessHealthy)
				} else {
					u.harvest()
				}
			}
		}
		u.moveToUnit(Enemy,Strongest)
	}
}
FIM
