Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;C;Build;Ranged;EnemyDir;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;C;Build;Ranged;EnemyDir;S;If_B_then_S_else_S;B;CanHarvest;S;C;MoveToUnit;Enemy;Weakest;S;C;MoveAway;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;C;Build;Light;Left;S;If_B_then_S_else_S;B;CanHarvest;S;C;Harvest;S;For_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;10;S;If_B_then_S;B;is_Type;Worker;S;S_S;S;S_S;S;C;MoveToUnit;Enemy;MostHealthy;S;C;MoveAway;S;S_S;S;C;Attack;Weakest;S;C;Attack;Random;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;C;Build;Light;Left;S;If_B_then_S_else_S;B;CanHarvest;S;Empty;S;Empty;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;0;S;C;Train;Worker;Down;S;C;Build;Light;EnemyDir;S;S_S;S;C;Train;Worker;Up;S;C;Build;Light;Left;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Ranged;EnemyDir;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Heavy;Down;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Light;Left;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Ranged;Right;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Heavy;Down;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Light;EnemyDir;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;5;S;C;Harvest;S;S_S;S;C;Train;Worker;Down;S;C;Build;Light;EnemyDir;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;S_S;S;C;Train;Worker;Down;S;C;Build;Light;EnemyDir;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;S_S;S;C;Train;Worker;Down;S;C;Build;Heavy;EnemyDir;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;S_S;S;C;Train;Worker;Down;S;C;Build;Heavy;Left;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;S_S;S;C;Train;Worker;Down;S;C;Build;Ranged;Left;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;S_S;S;C;Train;Worker;Down;S;C;Build;Ranged;EnemyDir;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;S_S;S;C;Train;Worker;Down;S;C;Build;Barracks;Left;S;C;Attack;LessHealthy



for(Unit u){
	for(Unit u){
		if(HaveQtdUnitsAttacking(3)) then {
			u.harvest()
		} else {
			u.train(Worker,Down)
			u.build(Barracks,Left)
		}
		u.attack(LessHealthy)
	}
}
FIM
