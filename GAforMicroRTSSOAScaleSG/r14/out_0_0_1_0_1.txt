Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;EnemyDir;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;S_S;S;C;Harvest;S;C;Idle;S;S_S;S;C;Idle;S;C;Idle;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfUnits;Heavy;5;S;C;Idle;S;C;Build;Worker;Down;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Build;Base;Left;S;C;Harvest;S;S_S;S;C;Build;Worker;Down;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;Idle;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;Empty;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Farthest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;MoveToUnit;Enemy;MostHealthy;S;C;Attack;MostHealthy;S;C;Train;Worker;Up;S;C;Attack;Farthest
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;MoveToUnit;Enemy;MostHealthy;S;C;Attack;LessHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;Attack;Weakest;S;C;Harvest;S;C;Train;Worker;Up



for(Unit u){
	if(u.isBuilder()) then {
		if(HasNumberOfWorkersHarvesting(1)) then {
			u.attack(Weakest)
		} else {
			u.harvest()
		}
	} else {
		u.train(Worker,Up)
	}
}
FIM
