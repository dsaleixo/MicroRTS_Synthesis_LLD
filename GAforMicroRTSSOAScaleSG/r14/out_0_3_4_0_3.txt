Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Build;Worker;Down;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;50;S;S_S;S;C;Build;Heavy;Down;S;C;Harvest;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Heavy;1;S;C;Build;Heavy;Up;S;C;Idle;S;If_B_then_S_else_S;B;is_Type;Worker;S;C;MoveToUnit;Enemy;Random;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Barracks;0;S;C;Train;Worker;Right;S;C;Idle
Atual=S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;is_Type;Worker;S;C;MoveToUnit;Enemy;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;is_Type;Worker;S;C;MoveToUnit;Enemy;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;is_Type;Worker;S;C;MoveToUnit;Enemy;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;is_Type;Worker;S;C;MoveToUnit;Enemy;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;If_B_then_S_else_S;B;is_Type;Worker;S;C;MoveToUnit;Enemy;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;If_B_then_S_else_S;B;is_Type;Worker;S;C;Build;Heavy;Right;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;S_S;S;C;MoveAway;S;S_S;S;S_S;S;C;Harvest;S;C;Attack;Closest;S;For_S;S;C;Idle
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;S_S;S;C;MoveAway;S;S_S;S;S_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;C;Attack;LessHealthy;S;C;Harvest;S;C;Attack;Closest;S;For_S;S;S_S;S;For_S;S;C;Build;Heavy;Down;S;S_S;S;C;Build;Heavy;Down;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;S_S;S;For_S;S;C;Build;Base;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;C;Attack;LessHealthy;S;C;Harvest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;C;Attack;LessHealthy;S;C;Harvest;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;Idle;S;C;Harvest;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;S_S;S;C;Idle;S;C;Attack;Closest;S;C;Idle;S;C;Harvest;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Attack;Closest;S;C;Idle;S;C;Harvest;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Build;Ranged;Up;S;For_S;S;C;Idle;S;C;Harvest;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;MoveToUnit;Ally;Closest;S;C;Idle;S;C;Harvest;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Attack;Weakest;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;C;Idle;S;C;Harvest;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Attack;Weakest;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;C;Idle;S;C;Harvest;S;C;MoveToUnit;Enemy;MostHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;MoveAway;S;S_S;S;C;Train;Worker;EnemyDir;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;C;Idle;S;C;Harvest;S;C;MoveToUnit;Enemy;MostHealthy



for(Unit u){
	if(u.OpponentHasUnitInPlayerRange()) then {
		e
	} else {
		u.train(Worker,EnemyDir)
		for(Unit u){
			if(HasNumberOfWorkersHarvesting(1)) then {
				if(u.OpponentHasUnitInPlayerRange()) then {
					u.idle()
				}
			} else {
				u.harvest()
			}
		}
	}
	u.moveToUnit(Enemy,MostHealthy)
}
FIM
