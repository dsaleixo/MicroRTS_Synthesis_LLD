Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Down;S;For_S;S;C;Train;Barracks;EnemyDir
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Attack;Weakest;S;S_S;S;C;Attack;Random;S;For_S;S;C;Harvest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Attack;Weakest;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Base;Down;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Attack;Weakest;S;C;Attack;Closest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Strongest;S;C;Attack;Closest;S;C;Train;Barracks;Left
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;For_S;S;If_B_then_S;B;IsBuilder;S;S_S;S;S_S;S;C;Attack;Weakest;S;C;MoveAway;S;C;MoveAway;S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Attack;Closest;S;C;Build;Heavy;Up;S;C;Train;Worker;Right
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;For_S;S;C;Attack;Closest;S;C;Harvest;S;C;Train;Worker;Right
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;For_S;S;C;Attack;Closest;S;C;Harvest;S;C;Train;Worker;Right
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;Idle;S;C;Harvest;S;C;Train;Worker;Down



for(Unit u){
	if(u.HasUnitInOpponentRange()) then {
		e
	} else {
		for(Unit u){
			u.attack(LessHealthy)
			for(Unit u){
				if(HasNumberOfWorkersHarvesting(1)) then {
					u.idle()
				} else {
					u.harvest()
				}
				u.train(Worker,Down)
			}
		}
	}
}
FIM
