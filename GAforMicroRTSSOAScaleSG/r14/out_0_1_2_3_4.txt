Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;LessHealthy;S;For_S;S;C;Idle
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;S_S;S;C;Attack;Strongest;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;LessHealthy;S;For_S;S;C;Build;Light;Left
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;is_Type;Base;S;C;Train;Worker;EnemyDir;S;If_B_then_S_else_S;B;IsBuilder;S;C;Harvest;S;C;MoveAway;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;S_S;S;S_S;S;C;Build;Ranged;Left;S;C;Build;Barracks;Right;S;S_S;S;C;MoveAway;S;C;Idle;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;Harvest;S;C;Build;Ranged;Up;S;C;MoveToUnit;Enemy;Strongest



for(Unit u){
	for(Unit u){
		u.idle()
		if(HasNumberOfWorkersHarvesting(1)) then {
			u.build(Ranged,Left)
			u.moveAway()
		} else {
			u.train(Worker,Down)
			u.harvest()
		}
		u.moveToUnit(Enemy,Strongest)
	}
}
FIM
