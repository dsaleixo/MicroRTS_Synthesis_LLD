Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Build;Ranged;Left;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Build;Ranged;Left;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;For_S;S;C;Harvest;S;For_S;S;C;Attack;Farthest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;MoveToUnit;Ally;MostHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;S_S;S;For_S;S;C;Harvest;S;For_S;S;C;Attack;Farthest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;MoveToUnit;Ally;MostHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;For_S;S;C;Harvest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;MoveToUnit;Ally;MostHealthy;S;C;Train;Worker;Up



for(Unit u){
	u.attack(Strongest)
	if(HaveQtdUnitsAttacking(2)) then {
		for(Unit u){
			u.harvest()
		}
	} else {
		if(u.HasUnitWithinDistanceFromOpponent(5)) then {
			u.moveToUnit(Ally,MostHealthy)
		} else {
			u.train(Worker,Up)
		}
	}
}
FIM
