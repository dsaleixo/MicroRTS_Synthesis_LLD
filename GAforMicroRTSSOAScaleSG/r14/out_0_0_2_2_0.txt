Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Idle;S;C;Attack;Farthest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Idle;S;C;MoveToUnit;Enemy;LessHealthy
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;C;Idle;S;C;Harvest;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Farthest;S;C;MoveToUnit;Ally;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Left;S;C;Idle;S;C;Harvest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Harvest;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;MoveAway;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Idle;S;C;Harvest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;C;Attack;LessHealthy;S;Empty
Atual=S;For_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Idle;S;C;Harvest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;C;Attack;LessHealthy;S;Empty
Atual=S;For_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;S_S;S;For_S;S;S_S;S;C;Train;Ranged;Right;S;C;Build;Barracks;Left;S;C;Harvest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;C;Attack;Weakest;S;Empty



for(Unit u){
	if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
		for(Unit u){
			u.train(Ranged,Right)
			u.build(Barracks,Left)
		}
		u.harvest()
		if(u.HasUnitWithinDistanceFromOpponent(25)) then {
			for(Unit u){
				u.attack(Weakest)
			}
		} else {
			e
		}
	}
}
FIM
