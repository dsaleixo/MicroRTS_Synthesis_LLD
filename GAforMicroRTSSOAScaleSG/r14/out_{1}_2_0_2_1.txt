Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Left;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;2;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Light;0;S;For_S;S;S_S;S;C;Attack;LessHealthy;S;C;MoveAway;S;C;MoveToUnit;Enemy;LessHealthy;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;50;S;C;Train;Light;Left;S;C;Train;Worker;EnemyDir;S;C;Harvest
Atual=S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Build;Base;Down;S;C;Build;Worker;Up;S;S_S;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;2;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Light;0;S;For_S;S;C;Attack;LessHealthy;S;C;MoveToUnit;Enemy;LessHealthy;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Harvest



for(Unit u){
	for(Unit u){
		if(u.canHarvest()) then {
			u.build(Base,Down)
		} else {
			e
		}
	}
	if(HasNumberOfWorkersHarvesting(2)) then {
		if(OpponentHasNumberOfUnits(Light,0)) then {
			for(Unit u){
				u.attack(LessHealthy)
			}
		} else {
			u.moveToUnit(Enemy,LessHealthy)
		}
	}
	u.train(Worker,EnemyDir)
	u.harvest()
}
FIM
