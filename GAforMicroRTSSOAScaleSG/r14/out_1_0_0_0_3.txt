Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;S_S;S;C;Train;Worker;Right;S;C;Train;Barracks;Right
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Worker;EnemyDir;S;C;Attack;Weakest;S;S_S;S;C;Train;Worker;Right;S;C;Train;Barracks;Right
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;C;MoveAway;S;S_S;S;S_S;S;C;Build;Worker;EnemyDir;S;C;Attack;Weakest;S;S_S;S;C;Train;Worker;Right;S;C;Train;Barracks;Right
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;S_S;S;C;Harvest;S;C;MoveAway;S;S_S;S;S_S;S;C;Build;Worker;EnemyDir;S;C;Attack;Weakest;S;S_S;S;C;Train;Worker;Right;S;C;Train;Barracks;Right
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;S_S;S;C;Harvest;S;C;MoveAway;S;S_S;S;S_S;S;C;Build;Base;Left;S;C;Idle;S;S_S;S;C;MoveToUnit;Enemy;Closest;S;C;Train;Worker;Right
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;S_S;S;C;Harvest;S;C;MoveAway;S;S_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Idle;S;S_S;S;C;Train;Light;Down;S;C;Train;Worker;Right



for(Unit u){
	if(HaveQtdUnitsAttacking(2)) then {
		u.harvest()
		u.moveAway()
	} else {
		u.attack(Random)
		for(Unit u){
			u.idle()
		}
		u.train(Light,Down)
		u.train(Worker,Right)
	}
}
FIM
