Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;C;Idle;S;C;MoveToUnit;Enemy;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;S_S;S;C;Train;Worker;Right;S;C;Idle;S;For_S;S;C;Train;Barracks;Down;S;C;MoveToUnit;Enemy;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;S_S;S;C;Train;Worker;Right;S;C;Idle;S;Empty;S;C;Harvest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Worker;1;S;S_S;S;C;Train;Worker;Right;S;C;Idle;S;Empty;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Ranged;Down;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;S_S;S;C;MoveToUnit;Enemy;Closest;S;C;Train;Worker;Down;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;For_S;S;C;MoveToUnit;Enemy;Closest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;S_S;S;C;Idle;S;C;Harvest;S;S_S;S;For_S;S;C;MoveToUnit;Enemy;Closest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Barracks;Down;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;Attack;Random;S;S_S;S;For_S;S;C;Build;Ranged;Right;S;C;Train;Light;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Barracks;Down;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;Attack;Weakest;S;C;Train;Light;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Barracks;Down;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;Attack;LessHealthy;S;C;Train;Light;Up
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Train;Heavy;EnemyDir;S;C;Idle;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Barracks;Down;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;Attack;LessHealthy;S;C;Train;Base;EnemyDir
Atual=S;S_S;S;For_S;S;S_S;S;C;Train;Heavy;EnemyDir;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Barracks;Down;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Idle
Atual=S;S_S;S;For_S;S;S_S;S;C;Train;Heavy;EnemyDir;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Barracks;Down;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;Train;Light;Left;S;For_S;S;C;Attack;Weakest
Atual=S;S_S;S;For_S;S;S_S;S;S_S;S;C;Train;Heavy;EnemyDir;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Barracks;Down;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;Train;Light;Left;S;S_S;S;C;Attack;Closest;S;C;Harvest;S;For_S;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Heavy;EnemyDir;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Barracks;Down;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;MoveToUnit;Enemy;Weakest;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Light;EnemyDir;S;For_S;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Barracks;Down;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;MoveToUnit;Enemy;Weakest;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Light;EnemyDir;S;For_S;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Barracks;Down;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;Idle;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Light;EnemyDir;S;For_S;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Barracks;Down;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;MoveToUnit;Enemy;Closest;S;C;Attack;Closest



for(Unit u){
	u.train(Light,EnemyDir)
	for(Unit u){
		for(Unit u){
			if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
				u.build(Barracks,Down)
			}
			if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
				u.harvest()
			} else {
				u.moveToUnit(Enemy,Closest)
			}
		}
	}
	u.attack(Closest)
}
FIM
