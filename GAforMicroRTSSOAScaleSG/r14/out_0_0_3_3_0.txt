Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;S_S;S;C;Train;Worker;Left;S;C;Harvest
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Train;Worker;Down;S;For_S;S;For_S;S;If_B_then_S;B;CanHarvest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Light;50;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;For_S;S;For_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;C;Build;Ranged;Left;S;C;Train;Worker;Down;S;For_S;S;For_S;S;If_B_then_S;B;CanHarvest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;C;Idle;S;C;Harvest;S;S_S;S;C;Idle;S;C;Idle;S;C;Train;Worker;Down;S;For_S;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;50;S;For_S;S;S_S;S;C;Attack;LessHealthy;S;C;Harvest



for(Unit u){
	for(Unit u){
		if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
			u.idle()
			u.harvest()
		} else {
			e
		}
		u.train(Worker,Down)
	}
	for(Unit u){
		for(Unit u){
			for(Unit u){
				u.attack(LessHealthy)
			}
		}
	}
}
FIM
