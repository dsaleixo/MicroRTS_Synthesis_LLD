Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;S_S;S;C;Harvest;S;C;Idle;S;For_S;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Heavy;Left;S;C;Attack;Closest;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Random;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Farthest;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;For_S;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;MostHealthy;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;If_B_then_S;B;IsBuilder;S;C;Attack;MostHealthy;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;MostHealthy;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;If_B_then_S;B;IsBuilder;S;C;Build;Ranged;Left;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;If_B_then_S;B;IsBuilder;S;C;Build;Ranged;Left;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;If_B_then_S;B;IsBuilder;S;C;Build;Worker;Right;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;If_B_then_S;B;IsBuilder;S;C;Build;Heavy;Down;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;If_B_then_S;B;IsBuilder;S;C;Harvest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;For_S;S;If_B_then_S;B;IsBuilder;S;C;Harvest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;S_S;S;For_S;S;If_B_then_S;B;IsBuilder;S;C;Harvest;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;25;S;C;MoveAway;S;For_S;S;C;Train;Worker;Up



for(Unit u){
	u.attack(Strongest)
	if(HaveQtdUnitsAttacking(2)) then {
		for(Unit u){
			if(u.isBuilder()) then {
				u.harvest()
			}
		}
	} else {
		for(Unit u){
			u.train(Worker,Up)
		}
	}
}
FIM
