Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;S_S;S;C;Idle;S;C;Harvest;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Base;Down;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Build;Barracks;Up;S;C;Build;Light;Left;S;S_S;S;C;Harvest;S;S_S;S;C;Harvest;S;C;Train;Light;EnemyDir;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Build;Barracks;Up;S;Empty;S;S_S;S;C;Harvest;S;C;Train;Light;Left;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Build;Barracks;Down;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Harvest;S;C;Train;Light;Left;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Barracks;Down;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;Train;Heavy;Up;S;C;Harvest;S;C;Train;Light;Left;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Barracks;Down;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;For_S;S;C;Train;Heavy;Up;S;C;Harvest;S;C;Train;Light;EnemyDir;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Barracks;Down;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;For_S;S;C;Idle;S;C;Harvest;S;C;Train;Light;EnemyDir;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Barracks;Down;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;For_S;S;C;Train;Ranged;Right;S;C;Train;Worker;Up;S;C;Train;Light;EnemyDir;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Heavy;5;S;C;Idle;S;C;Train;Base;Up;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;Idle;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;Idle;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;Idle;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;Idle;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;Idle;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;5;S;C;Idle;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;2;S;S_S;S;C;Idle;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;2;S;S_S;S;C;Idle;S;C;Attack;Weakest;S;C;Train;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;C;Attack;Weakest;S;C;Train;Worker;Up;S;C;Harvest
Atual=S;S_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;C;Attack;Weakest;S;C;Train;Worker;Up;S;C;Harvest;S;For_S;S;For_S;S;C;Attack;Random
Atual=S;S_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;C;Attack;Weakest;S;C;Train;Worker;Up;S;C;Harvest;S;For_S;S;For_S;S;C;Attack;Random
Atual=S;S_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;C;Attack;Weakest;S;C;Train;Worker;Up;S;C;Harvest;S;For_S;S;For_S;S;C;Attack;Random
Atual=S;S_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;C;Attack;Weakest;S;C;Train;Worker;Up;S;C;Harvest;S;For_S;S;For_S;S;C;Attack;Random
Atual=S;S_S;S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;C;Idle;S;C;Attack;Weakest;S;C;Train;Worker;Up;S;C;Harvest;S;C;Harvest;S;For_S;S;For_S;S;C;Attack;Strongest
Atual=S;S_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;4;S;S_S;S;For_S;S;For_S;S;S_S;S;C;Train;Base;EnemyDir;S;C;Train;Light;Up;S;C;Attack;Weakest;S;C;Train;Worker;Left;S;C;Harvest;S;For_S;S;For_S;S;C;Attack;Strongest



for(Unit u){
	if(HasNumberOfWorkersHarvesting(4)) then {
		u.attack(Weakest)
	} else {
		u.train(Worker,Left)
	}
	u.harvest()
}
for(Unit u){
	for(Unit u){
		u.attack(Strongest)
	}
}
FIM
