Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Closest
Atual=S;S_S;S;S_S;S;For_S;S;C;Harvest;S;For_S;S;C;Train;Worker;Down;S;For_S;S;C;Attack;Closest
Atual=S;S_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;For_S;S;C;Train;Worker;Down;S;For_S;S;C;Attack;Farthest
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;Farthest
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;For_S;S;For_S;S;C;Train;Worker;Up;S;For_S;S;Empty
Atual=S;S_S;S;For_S;S;C;Attack;Weakest;S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;For_S;S;For_S;S;C;Train;Worker;Up;S;Empty
Atual=S;S_S;S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Attack;Random;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Harvest;S;C;Attack;Weakest
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Worker;5;S;C;Build;Worker;Left;S;C;Harvest;S;C;Attack;Weakest
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;S_S;S;C;MoveAway;S;C;Train;Ranged;Left;S;S_S;S;S_S;S;C;Build;Heavy;Right;S;C;Idle;S;C;Harvest;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;S_S;S;S_S;S;C;Train;Base;Up;S;C;MoveToUnit;Ally;Weakest;S;If_B_then_S;B;CanAttack;S;C;Attack;Closest



for(Unit u){
	u.idle()
}
for(Unit u){
	u.train(Worker,EnemyDir)
	if(u.OpponentHasUnitInPlayerRange()) then {
		e
	} else {
		u.build(Heavy,Right)
		u.harvest()
	}
	if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
		for(Unit u){
			u.moveToUnit(Ally,Weakest)
			if(u.canAttack()) then {
				u.attack(Closest)
			}
		}
	}
}
FIM
