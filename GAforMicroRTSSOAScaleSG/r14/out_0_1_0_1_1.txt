Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Left;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;CanHarvest;S;C;Build;Ranged;Left;S;C;Train;Worker;Left;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;CanHarvest;S;C;Build;Light;EnemyDir;S;C;Train;Worker;Left;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;CanHarvest;S;C;Build;Light;Down;S;C;Train;Worker;Left;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;CanHarvest;S;If_B_then_S;B;IsBuilder;S;C;Build;Light;Down;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;is_Type;Ranged;S;Empty;S;C;Train;Worker;EnemyDir;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;EnemyDir;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Build;Light;Down;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up;S;For_S;S;C;Build;Base;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanHarvest;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;4;S;If_B_then_S;B;CanHarvest;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;S_S;S;S_S;S;C;Harvest;S;C;Train;Barracks;EnemyDir;S;For_S;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Random



for(Unit u){
	if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
		u.harvest()
		for(Unit u){
			u.attack(Weakest)
		}
		for(Unit u){
			u.train(Worker,Up)
		}
	}
}
FIM
