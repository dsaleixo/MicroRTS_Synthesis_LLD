Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;Attack;MostHealthy;S;C;Build;Ranged;Right;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Enemy;Closest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Weakest;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Enemy;Closest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;S_S;S;C;Harvest;S;C;Build;Base;Down;S;C;Train;Worker;Down;S;C;Attack;Weakest;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;0;S;C;MoveToUnit;Enemy;MostHealthy;S;C;MoveToUnit;Enemy;Closest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;C;Train;Worker;Down;S;C;Attack;Closest;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;0;S;C;MoveToUnit;Enemy;MostHealthy;S;C;MoveToUnit;Enemy;Random



for(Unit u){
	for(Unit u){
		if(HaveQtdUnitsAttacking(3)) then {
			u.harvest()
		} else {
			u.train(Worker,Down)
		}
		u.attack(Closest)
	}
	if(HaveQtdUnitsAttacking(0)) then {
		u.moveToUnit(Enemy,MostHealthy)
	} else {
		u.moveToUnit(Enemy,Random)
	}
}
FIM
