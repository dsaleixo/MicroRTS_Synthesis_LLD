Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;MoveAway;S;C;Harvest;S;S_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy;S;S_S;S;C;Idle;S;C;Build;Light;Down
Atual=S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Worker;2;S;C;Idle;S;S_S;S;C;Build;Worker;EnemyDir;S;C;Attack;Weakest;S;S_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;For_S;S;Empty;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;C;Attack;Closest;S;S_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;For_S;S;C;Harvest;S;C;Attack;Closest;S;S_S;S;If_B_then_S;B;HasLessNumberOfUnits;Base;5;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Strongest



for(Unit u){
	if(HaveQtdUnitsAttacking(3)) then {
		for(Unit u){
			u.harvest()
		}
	} else {
		u.attack(Closest)
	}
	u.train(Worker,Up)
	u.moveToUnit(Enemy,Strongest)
}
FIM
