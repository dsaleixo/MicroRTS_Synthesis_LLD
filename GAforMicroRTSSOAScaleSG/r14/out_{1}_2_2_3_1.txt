Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;0;S;For_S;S;For_S;S;C;Attack;Closest;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;Build;Base;EnemyDir;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Idle;S;C;Harvest;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;MoveToUnit;Enemy;LessHealthy;S;C;MoveAway
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitInPlayerRange;S;C;Train;Barracks;Left;S;S_S;S;C;Train;Light;EnemyDir;S;C;Build;Barracks;EnemyDir;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Harvest;S;C;Train;Worker;Down;S;C;MoveToUnit;Enemy;LessHealthy
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Light;EnemyDir;S;C;Build;Barracks;EnemyDir;S;S_S;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Harvest;S;C;Train;Base;Down;S;C;MoveToUnit;Enemy;LessHealthy
Atual=S;S_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Light;EnemyDir;S;C;Build;Barracks;EnemyDir;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Harvest;S;C;MoveToUnit;Enemy;LessHealthy;S;For_S;S;For_S;S;S_S;S;C;Build;Light;Up;S;C;Attack;MostHealthy
Atual=S;S_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Harvest;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;S_S;S;C;Idle;S;For_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;For_S;S;C;Attack;MostHealthy
Atual=S;S_S;S;S_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Harvest;S;For_S;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Idle;S;C;Train;Light;Down;S;S_S;S;For_S;S;C;Train;Barracks;Up;S;For_S;S;C;MoveToUnit;Ally;MostHealthy;S;For_S;S;For_S;S;C;Attack;MostHealthy



for(Unit u){
	for(Unit u){
		u.harvest()
		for(Unit u){
			u.build(Barracks,EnemyDir)
		}
	}
	u.idle()
	u.train(Light,Down)
}
for(Unit u){
	u.moveToUnit(Ally,MostHealthy)
}
for(Unit u){
	for(Unit u){
		u.attack(MostHealthy)
	}
}
FIM
