Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Train;Worker;Down;S;S_S;S;C;Train;Base;Left;S;C;MoveToUnit;Enemy;Farthest;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Build;Heavy;Down;S;C;Idle;S;C;Train;Worker;Down;S;C;Attack;MostHealthy
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Down;S;C;Idle
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Down;S;For_S;S;C;Build;Heavy;EnemyDir
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Down;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;5;S;C;Idle;S;C;Harvest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Down;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;Idle;S;C;Harvest



for(Unit u){
	for(Unit u){
		u.attack(LessHealthy)
		u.train(Worker,Down)
		for(Unit u){
			if(HasNumberOfWorkersHarvesting(1)) then {
				u.idle()
			} else {
				u.harvest()
			}
		}
	}
}
FIM
