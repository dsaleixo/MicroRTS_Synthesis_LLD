Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Attack;Random;S;C;Idle;S;For_S;S;C;Train;Worker;Left;S;C;MoveAway
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Right;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Down;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;For_S;S;S_S;S;C;Idle;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;S_S;S;C;Attack;MostHealthy;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;S_S;S;C;Attack;Closest;S;C;Idle
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;C;Train;Worker;Up;S;For_S;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;5;S;C;Attack;LessHealthy;S;C;Harvest;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;S_S;S;C;Idle;S;C;Attack;LessHealthy;S;C;Harvest;S;If_B_then_S;B;is_Type;Base;S;For_S;S;C;Train;Worker;Up



for(Unit u){
	if(HasNumberOfWorkersHarvesting(1)) then {
		u.idle()
		u.attack(LessHealthy)
	} else {
		u.harvest()
	}
	if(u.is(Base)) then {
		for(Unit u){
			u.train(Worker,Up)
		}
	}
}
FIM
