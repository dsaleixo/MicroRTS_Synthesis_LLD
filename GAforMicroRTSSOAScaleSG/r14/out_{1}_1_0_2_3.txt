Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;S_S;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;LessHealthy
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;For_S;S;C;Train;Worker;Down;S;S_S;S;C;Attack;Closest;S;C;Idle;S;For_S;S;If_B_then_S;B;CanHarvest;S;C;Idle
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Train;Worker;Down;S;Empty
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Train;Worker;Right;S;Empty
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;50;S;For_S;S;C;Train;Worker;Right;S;Empty
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;For_S;S;S_S;S;C;Attack;Farthest;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;S_S;S;C;Train;Heavy;Up;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;MoveAway;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasNumberOfUnits;Heavy;2;S;C;MoveAway
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitInOpponentRange;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;For_S;S;S_S;S;C;Harvest;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;MoveAway;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Down;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Right;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Down;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Build;Worker;Left;S;C;Train;Barracks;EnemyDir;S;C;Train;Worker;Up;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Build;Worker;EnemyDir;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;C;Train;Ranged;EnemyDir;S;For_S;S;C;Train;Light;Up;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;C;Train;Worker;Left;S;For_S;S;S_S;S;C;Build;Ranged;Left;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Left;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;0;S;C;Idle;S;S_S;S;C;Build;Light;Down;S;C;Build;Heavy;EnemyDir;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;C;Harvest;S;If_B_then_S;B;HasNumberOfUnits;Heavy;2;S;C;Idle;S;For_S;S;S_S;S;C;Build;Light;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;S_S;S;For_S;S;C;MoveAway;S;For_S;S;C;MoveAway;S;If_B_then_S_else_S;B;IsBuilder;S;C;Train;Heavy;Up;S;C;MoveAway;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;For_S;S;C;Harvest;S;Empty;S;C;Attack;LessHealthy



for(Unit u){
	u.train(Worker,Down)
	for(Unit u){
		if(HaveQtdUnitsAttacking(2)) then {
			for(Unit u){
				u.harvest()
			}
		} else {
			e
		}
		u.attack(LessHealthy)
	}
}
FIM
