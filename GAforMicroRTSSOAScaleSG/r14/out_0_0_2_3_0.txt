Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;S_S;S;C;Train;Worker;Right;S;C;MoveAway
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Attack;Weakest;S;S_S;S;S_S;S;C;Harvest;S;C;Attack;Weakest;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Attack;Weakest;S;S_S;S;If_B_then_S;B;HasLessNumberOfUnits;Worker;5;S;C;Harvest;S;C;Attack;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Attack;Weakest;S;S_S;S;If_B_then_S;B;CanAttack;S;C;Attack;MostHealthy;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;5;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Attack;Closest;S;C;MoveToUnit;Ally;Random;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Attack;Weakest;S;S_S;S;If_B_then_S;B;CanAttack;S;C;Attack;Closest;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;Empty;S;C;MoveToUnit;Ally;Random;S;C;Idle;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;3;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Up;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Harvest;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;3;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Right;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;10;S;C;Harvest;S;C;Attack;Closest;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;3;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Right;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Attack;Closest;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;3;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Right;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Attack;Closest;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;3;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Right;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Attack;Closest;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;3;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Right;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Attack;Closest;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasNumberOfUnits;Ranged;0;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Right;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Attack;Closest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;S_S;S;C;Attack;Strongest;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;C;Harvest;S;S_S;S;C;Attack;Strongest;S;C;Train;Worker;Up



for(Unit u){
	if(HaveQtdUnitsAttacking(2)) then {
		u.harvest()
	} else {
		u.attack(Strongest)
		u.train(Worker,Up)
	}
}
FIM
