Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Attack;MostHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;S_S;S;S_S;S;C;MoveToUnit;Ally;Closest;S;C;Train;Worker;Up;S;C;Idle
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Harvest;S;C;Attack;Random;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;Empty;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;3;S;S_S;S;For_S;S;C;Harvest;S;C;Train;Light;Right;S;Empty;S;C;Train;Worker;Up



for(Unit u){
	u.attack(Closest)
	if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
		for(Unit u){
			if(HaveQtdUnitsAttacking(3)) then {
				for(Unit u){
					u.harvest()
				}
			}
		}
	} else {
		e
	}
	u.train(Worker,Up)
}
FIM
