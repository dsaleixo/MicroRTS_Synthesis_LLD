Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Attack;Weakest;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;C;Harvest;S;S_S;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;For_S;S;C;Train;Ranged;Left;S;S_S;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;Random
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;LessHealthy
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;S_S;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;LessHealthy
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;S_S;S;C;Train;Base;Right;S;C;Harvest;S;S_S;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;LessHealthy
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;For_S;S;S_S;S;C;MoveToUnit;Enemy;Strongest;S;C;Idle;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;2;S;C;MoveAway;S;S_S;S;C;Harvest;S;S_S;S;C;Train;Worker;EnemyDir;S;C;MoveToUnit;Enemy;LessHealthy



for(Unit u){
	for(Unit u){
		for(Unit u){
			if(HasNumberOfWorkersHarvesting(2)) then {
				for(Unit u){
					u.moveToUnit(Enemy,Strongest)
					u.idle()
				}
			} else {
				e
			}
		}
	}
	u.harvest()
	u.train(Worker,EnemyDir)
	u.moveToUnit(Enemy,LessHealthy)
}
FIM
