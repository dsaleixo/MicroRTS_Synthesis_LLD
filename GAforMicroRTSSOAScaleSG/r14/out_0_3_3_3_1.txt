Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;2;S;C;Harvest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Harvest;S;S_S;S;For_S;S;C;Train;Worker;Down;S;Empty;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;C;Idle;S;For_S;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;C;Train;Worker;EnemyDir;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Ranged;EnemyDir;S;S_S;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Ally;Random;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;C;Build;Base;Down;S;C;Attack;LessHealthy



for(Unit u){
	u.train(Worker,Up)
	if(HaveQtdUnitsAttacking(3)) then {
		u.harvest()
	} else {
		e
	}
	u.attack(LessHealthy)
}
FIM
