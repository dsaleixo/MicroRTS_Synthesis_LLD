Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Closest
Atual=S;S_S;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Closest
Atual=S;S_S;S;For_S;S;For_S;S;C;Idle;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;MoveToUnit;Ally;Weakest;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;For_S;S;C;Idle;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;MoveToUnit;Ally;Weakest;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Harvest;S;For_S;S;C;Train;Heavy;EnemyDir;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;MoveToUnit;Ally;Weakest;S;C;Train;Worker;Left



for(Unit u){
	u.idle()
	u.harvest()
}
for(Unit u){
	u.attack(Closest)
}
for(Unit u){
	if(u.canHarvest()) then {
		u.moveToUnit(Ally,Weakest)
	} else {
		u.train(Worker,Left)
	}
}
FIM
