Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;1;S;For_S;S;S_S;S;C;Build;Heavy;EnemyDir;S;C;Attack;Random;S;S_S;S;C;Train;Worker;Right;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;1;S;Empty;S;S_S;S;C;Train;Worker;Right;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;1;S;Empty;S;S_S;S;C;Train;Worker;Right;S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;1;S;Empty;S;S_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;1;S;Empty;S;S_S;S;For_S;S;C;Attack;Closest;S;S_S;S;C;Train;Worker;Down;S;C;Idle
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;1;S;Empty;S;S_S;S;S_S;S;For_S;S;C;Attack;Closest;S;S_S;S;C;Train;Worker;Left;S;C;Train;Ranged;Right;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;1;S;Empty;S;S_S;S;For_S;S;C;Attack;Weakest;S;C;Train;Worker;Right
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;1;S;Empty;S;S_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Up;S;S_S;S;C;MoveToUnit;Enemy;Random;S;S_S;S;C;MoveAway;S;C;Idle
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;1;S;Empty;S;S_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;IsBuilder;S;C;Harvest;S;C;Attack;Strongest;S;For_S;S;For_S;S;C;Train;Worker;Up;S;C;MoveToUnit;Enemy;Random



for(Unit u){
	if(u.HasUnitWithinDistanceFromOpponent(1)) then {
		e
	} else {
		for(Unit u){
			u.idle()
			if(u.isBuilder()) then {
				u.harvest()
			} else {
				e
			}
			for(Unit u){
				for(Unit u){
					u.train(Worker,Up)
				}
			}
		}
		u.moveToUnit(Enemy,Random)
	}
}
FIM
