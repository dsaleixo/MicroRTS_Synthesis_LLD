Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Train;Worker;Left;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;If_B_then_S_else_S;B;HasNumberOfUnits;Base;5;S;C;Idle;S;C;Train;Worker;Left;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Idle;S;C;Harvest;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Train;Worker;Left;S;C;Harvest;S;For_S;S;S_S;S;C;Build;Ranged;Down;S;C;Train;Worker;Left;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;Empty;S;C;Harvest;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Train;Worker;Left;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;Empty;S;For_S;S;C;Harvest;S;For_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;S_S;S;For_S;S;C;Harvest;S;C;Train;Barracks;Down;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;Empty;S;For_S;S;C;Harvest;S;For_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy



for(Unit u){
	if(HaveQtdUnitsAttacking(4)) then {
		for(Unit u){
			u.harvest()
		}
	} else {
		if(u.canHarvest()) then {
			if(u.HasUnitWithinDistanceFromOpponent(25)) then {
				e
			} else {
				for(Unit u){
					u.harvest()
				}
			}
		} else {
			for(Unit u){
				u.train(Worker,Up)
			}
		}
		u.attack(LessHealthy)
	}
}
FIM
