Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;S_S;S;C;Attack;Strongest;S;S_S;S;C;Harvest;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Left
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Harvest;S;C;Build;Barracks;EnemyDir;S;S_S;S;C;Harvest;S;C;Attack;Strongest;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Build;Worker;Left;S;C;Idle;S;C;Attack;LessHealthy;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;S_S;S;S_S;S;C;Harvest;S;C;Attack;MostHealthy;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;S_S;S;C;MoveToUnit;Enemy;LessHealthy;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;25;S;C;MoveToUnit;Enemy;Closest;S;C;Harvest
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;S_S;S;C;MoveToUnit;Enemy;LessHealthy;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;2;S;C;MoveToUnit;Enemy;Closest;S;C;Harvest



for(Unit u){
	u.idle()
}
for(Unit u){
	u.moveToUnit(Enemy,LessHealthy)
	for(Unit u){
		u.train(Worker,EnemyDir)
	}
	for(Unit u){
		if(HasNumberOfWorkersHarvesting(2)) then {
			u.moveToUnit(Enemy,Closest)
		} else {
			u.harvest()
		}
	}
}
FIM
