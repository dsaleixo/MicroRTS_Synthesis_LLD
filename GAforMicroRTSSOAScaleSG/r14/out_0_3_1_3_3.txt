Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Random
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Ranged;Left;S;C;Train;Worker;Right;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Ranged;Left;S;C;Train;Worker;EnemyDir;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Light;EnemyDir;S;C;Train;Worker;EnemyDir;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Heavy;Right;S;C;Train;Worker;Down;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Build;Light;Down;S;C;Train;Worker;Down;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;1;S;C;Harvest;S;C;Train;Worker;Down;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;1;S;C;Build;Light;Down;S;C;Train;Worker;Down;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfUnits;Worker;4;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;1;S;C;Build;Light;Down;S;C;Train;Worker;Down;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfUnits;Worker;4;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;1;S;C;Harvest;S;C;Train;Worker;Down;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfUnits;Worker;4;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;C;Train;Worker;Down;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest



for(Unit u){
	for(Unit u){
		if(HasNumberOfUnits(Worker,4)) then {
			if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
				for(Unit u){
					if(HaveQtdUnitsAttacking(3)) then {
						u.harvest()
					}
				}
			} else {
				u.train(Worker,Down)
			}
		} else {
			for(Unit u){
				u.train(Worker,EnemyDir)
			}
		}
		u.attack(Weakest)
	}
}
FIM
