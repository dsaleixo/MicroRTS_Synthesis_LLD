Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;S_S;S;C;Attack;Closest;S;C;Train;Heavy;Up;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Left;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Left;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Idle;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Left;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Left;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Left;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;MoveToUnit;Enemy;MostHealthy;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Left;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;MoveToUnit;Enemy;MostHealthy;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Harvest;S;C;Train;Worker;Left;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Light;4;S;C;MoveToUnit;Ally;Strongest;S;C;Idle
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Base;Right;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;Empty;S;Empty
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;MoveToUnit;Ally;Farthest;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;MoveToUnit;Ally;Farthest;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Train;Worker;Left;S;C;Idle;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Idle;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;Attack;MostHealthy



for(Unit u){
	if(u.HasUnitThatKillsInOneAttack()) then {
		u.train(Worker,Left)
		u.idle()
	} else {
		u.attack(LessHealthy)
	}
}
for(Unit u){
	if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
		u.harvest()
	} else {
		e
	}
}
FIM
