Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;S_S;S;C;Build;Barracks;Up;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;C;Build;Barracks;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Random;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasLessNumberOfUnits;Barracks;2;S;C;Train;Worker;Right;S;S_S;S;For_S;S;C;Harvest;S;S_S;S;C;Train;Light;Right;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;S_S;S;C;Idle;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;S_S;S;C;Build;Worker;EnemyDir;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;Build;Worker;EnemyDir;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;5;S;For_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Left;S;For_S;S;For_S;S;C;Attack;Strongest
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;S_S;S;C;Train;Worker;Left;S;For_S;S;For_S;S;C;Attack;Strongest
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Harvest;S;C;MoveAway;S;S_S;S;C;MoveAway;S;C;MoveToUnit;Enemy;Strongest;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;S_S;S;S_S;S;For_S;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Train;Light;EnemyDir;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;5;S;C;Attack;Strongest;S;C;Harvest;S;C;Train;Worker;EnemyDir



for(Unit u){
	u.idle()
}
for(Unit u){
	for(Unit u){
		for(Unit u){
			u.train(Worker,EnemyDir)
		}
	}
	if(HasNumberOfWorkersHarvesting(5)) then {
		u.attack(Strongest)
	} else {
		u.harvest()
	}
}
FIM
