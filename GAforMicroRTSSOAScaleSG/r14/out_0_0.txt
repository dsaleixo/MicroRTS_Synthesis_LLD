Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Harvest;S;C;Attack;MostHealthy;S;If_B_then_S_else_S;B;CanAttack;S;C;MoveToUnit;Ally;Farthest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;If_B_then_S_else_S;B;CanAttack;S;C;MoveToUnit;Ally;Farthest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Weakest;S;If_B_then_S_else_S;B;CanAttack;S;C;MoveToUnit;Ally;Farthest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Weakest;S;If_B_then_S_else_S;B;IsBuilder;S;Empty;S;Empty
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Train;Worker;Down;S;C;Attack;Weakest;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Weakest;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Idle;S;C;Harvest;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Idle;S;C;Harvest;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;is_Type;Worker;S;C;Train;Worker;Down;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Harvest;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;C;Idle;S;C;Harvest;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;is_Type;Worker;S;Empty;S;C;Train;Worker;EnemyDir;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;C;Attack;Strongest;S;C;Harvest;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;is_Type;Worker;S;Empty;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;For_S;S;C;Attack;Strongest;S;C;Harvest



for(Unit u){
	if(u.is(Worker)) then {
		e
	} else {
		u.train(Worker,Up)
	}
	for(Unit u){
		if(HasNumberOfWorkersHarvesting(1)) then {
			for(Unit u){
				u.attack(Strongest)
			}
		} else {
			u.harvest()
		}
	}
}
FIM
