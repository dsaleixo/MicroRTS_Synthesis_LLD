Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Left;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Right;S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;Down;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;If_B_then_S;B;CanAttack;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;C;Train;Base;Left;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;C;Harvest;S;For_S;S;C;Harvest;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;For_S;S;C;Build;Barracks;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;S_S;S;C;Build;Worker;EnemyDir;S;C;Train;Base;Left;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;C;Build;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Right;S;C;Build;Worker;Right;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;C;Build;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;C;Build;Light;Right;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;C;Build;Light;Down;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Build;Ranged;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Up;S;C;Build;Barracks;Up;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;C;Build;Ranged;Right;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;C;Idle;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;C;Harvest;S;S_S;S;C;Train;Worker;Up;S;C;Attack;Closest



for(Unit u){
	if(HaveQtdUnitsAttacking(2)) then {
		u.harvest()
	} else {
		u.train(Worker,Up)
		u.attack(Closest)
	}
}
FIM
