Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Attack;Closest;S;C;MoveAway;S;S_S;S;C;Train;Worker;Down;S;C;Train;Ranged;EnemyDir
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Attack;Closest;S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Train;Barracks;Right;S;C;Harvest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Attack;Closest;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;10;S;S_S;S;C;Harvest;S;C;Train;Ranged;EnemyDir;S;S_S;S;C;Build;Barracks;EnemyDir;S;C;Train;Ranged;Left;S;C;Harvest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Attack;Closest;S;For_S;S;S_S;S;Empty;S;Empty;S;C;Train;Worker;Down
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;1;S;For_S;S;S_S;S;C;Attack;Closest;S;C;Train;Worker;Down;S;S_S;S;C;Attack;Closest;S;C;Train;Barracks;EnemyDir
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;S_S;S;S_S;S;C;Build;Light;Left;S;C;Harvest;S;For_S;S;S_S;S;C;Attack;Closest;S;C;Train;Worker;Down;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;S_S;S;S_S;S;S_S;S;C;Build;Light;Left;S;C;Harvest;S;S_S;S;C;Build;Base;Right;S;C;Harvest;S;For_S;S;S_S;S;C;Attack;Closest;S;C;Train;Worker;Down;S;C;Harvest
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;C;Harvest;S;For_S;S;S_S;S;C;Attack;Closest;S;C;Train;Worker;Down;S;C;Harvest
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;C;Harvest;S;For_S;S;S_S;S;S_S;S;C;Build;Ranged;Up;S;C;Attack;Closest;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Idle;S;C;Train;Worker;Right;S;Empty
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;C;Harvest;S;For_S;S;S_S;S;S_S;S;C;Build;Ranged;Up;S;C;Attack;Closest;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;Empty;S;C;Train;Worker;Right;S;Empty
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;C;Harvest;S;For_S;S;S_S;S;S_S;S;C;Build;Ranged;Up;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;Empty;S;For_S;S;C;Train;Worker;Right;S;Empty
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;C;Harvest;S;For_S;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;1;S;S_S;S;S_S;S;C;Build;Ranged;Up;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;Empty;S;For_S;S;C;Train;Worker;Right;S;Empty
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;C;Harvest;S;For_S;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;1;S;S_S;S;S_S;S;C;Build;Ranged;Up;S;C;Attack;Closest;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;Empty;S;For_S;S;For_S;S;C;Train;Worker;Right;S;Empty
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;C;Harvest;S;For_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;S_S;S;C;Build;Ranged;Up;S;C;Attack;Closest;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;Empty;S;For_S;S;For_S;S;C;Train;Worker;Right;S;Empty
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;C;Harvest;S;For_S;S;S_S;S;S_S;S;C;Build;Ranged;Up;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;Empty;S;S_S;S;S_S;S;C;Build;Barracks;Left;S;C;Build;Heavy;Left;S;For_S;S;For_S;S;C;Train;Worker;Right;S;Empty
Atual=S;S_S;S;For_S;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;S_S;S;C;Harvest;S;For_S;S;S_S;S;S_S;S;C;Build;Ranged;Right;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;For_S;S;C;Attack;Closest;S;C;Train;Barracks;Left;S;For_S;S;For_S;S;C;Train;Worker;Right;S;Empty



for(Unit u){
	u.idle()
}
for(Unit u){
	if(u.isBuilder()) then {
		u.harvest()
		for(Unit u){
			u.build(Ranged,Right)
			u.attack(LessHealthy)
			if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
				if(u.OpponentHasUnitInPlayerRange()) then {
					for(Unit u){
						u.attack(Closest)
					}
				} else {
					e
				}
			} else {
				for(Unit u){
					for(Unit u){
						u.train(Worker,Right)
					}
				}
			}
		}
	} else {
		e
	}
}
FIM
