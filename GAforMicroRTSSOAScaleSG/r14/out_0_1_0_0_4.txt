Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Train;Ranged;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Build;Worker;Left;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Build;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Build;Heavy;Down;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Build;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Build;Heavy;Down;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Build;Barracks;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;S_S;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Idle;S;C;Harvest;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;For_S;S;C;Attack;Weakest;S;S_S;S;C;Idle;S;C;Harvest;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;For_S;S;C;Attack;Weakest;S;C;Harvest;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;For_S;S;C;Attack;Weakest;S;C;Harvest;S;If_B_then_S;B;IsBuilder;S;S_S;S;C;Idle;S;C;MoveToUnit;Enemy;Strongest;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;C;Train;Worker;EnemyDir



for(Unit u){
	if(HasNumberOfWorkersHarvesting(3)) then {
		for(Unit u){
			u.attack(Weakest)
		}
	} else {
		u.harvest()
	}
	if(u.isBuilder()) then {
		u.idle()
		u.moveToUnit(Enemy,Strongest)
	}
	if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
		for(Unit u){
			u.train(Worker,EnemyDir)
		}
	}
}
FIM
