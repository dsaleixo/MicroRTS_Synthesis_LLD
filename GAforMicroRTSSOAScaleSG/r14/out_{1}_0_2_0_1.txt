Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;C;MoveAway;S;S_S;S;C;Train;Heavy;EnemyDir;S;C;Train;Worker;Down;S;S_S;S;For_S;S;C;Attack;Weakest;S;C;Idle
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;If_B_then_S;B;HaveQtdUnitsAttacking;1;S;C;Harvest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;If_B_then_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;If_B_then_S;B;HaveQtdUnitsAttacking;3;S;C;Harvest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;C;Idle;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Idle;S;C;Attack;MostHealthy;S;S_S;S;C;Harvest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Harvest;S;C;Idle;S;C;Attack;MostHealthy;S;S_S;S;C;Attack;Closest;S;C;Train;Light;Down;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Harvest;S;For_S;S;C;Idle;S;C;Attack;Strongest;S;S_S;S;C;Attack;Closest;S;C;Train;Light;Left
Atual=S;For_S;S;For_S;S;S_S;S;C;Build;Barracks;Up;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Harvest;S;For_S;S;C;Build;Barracks;Right;S;C;Attack;Strongest;S;S_S;S;C;Attack;Closest;S;C;Train;Light;Left



for(Unit u){
	for(Unit u){
		if(u.HasUnitThatKillsInOneAttack()) then {
			u.harvest()
			for(Unit u){
				u.build(Barracks,Right)
			}
		} else {
			u.attack(Strongest)
		}
		u.attack(Closest)
		u.train(Light,Left)
	}
}
FIM
