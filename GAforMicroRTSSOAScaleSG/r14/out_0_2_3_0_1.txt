Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Closest
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Right
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Up
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Attack;LessHealthy;S;C;MoveAway;S;S_S;S;S_S;S;C;Harvest;S;C;Train;Worker;Left;S;C;Harvest;S;For_S;S;S_S;S;For_S;S;For_S;S;S_S;S;C;Harvest;S;C;Attack;Farthest;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Barracks;50;S;C;MoveAway;S;C;MoveToUnit;Ally;Weakest
Atual=S;S_S;S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;C;Idle;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Left;S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Idle;S;C;Idle;S;For_S;S;For_S;S;S_S;S;C;Build;Heavy;EnemyDir;S;S_S;S;C;MoveToUnit;Ally;Strongest;S;C;MoveToUnit;Enemy;Strongest
Atual=S;S_S;S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;C;Idle;S;C;Train;Heavy;Down;S;For_S;S;C;Train;Worker;Right;S;For_S;S;For_S;S;For_S;S;S_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;CanHarvest;S;For_S;S;C;Harvest;S;S_S;S;For_S;S;C;Idle;S;For_S;S;C;Build;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;C;Idle;S;Empty;S;For_S;S;C;Train;Worker;Right;S;For_S;S;For_S;S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;0;S;Empty;S;Empty
Atual=S;S_S;S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;C;Idle;S;Empty;S;S_S;S;C;Harvest;S;C;Idle;S;For_S;S;C;Train;Worker;Right;S;For_S;S;For_S;S;If_B_then_S;B;HasLessNumberOfUnits;Base;3;S;For_S;S;C;Attack;LessHealthy
Atual=S;S_S;S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;C;Harvest;S;C;Idle;S;S_S;S;C;Harvest;S;For_S;S;C;Attack;Weakest;S;For_S;S;S_S;S;C;Train;Worker;Right;S;S_S;S;C;Build;Ranged;Down;S;C;Train;Base;Down;S;For_S;S;For_S;S;For_S;S;C;Harvest



for(Unit u){
	if(u.canAttack()) then {
		u.harvest()
		for(Unit u){
			u.attack(Weakest)
		}
	} else {
		for(Unit u){
			u.train(Worker,Right)
			u.build(Ranged,Down)
		}
	}
}
FIM
