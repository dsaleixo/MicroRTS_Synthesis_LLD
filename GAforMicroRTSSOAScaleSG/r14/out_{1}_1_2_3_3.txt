Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Closest;S;S_S;S;C;Build;Heavy;Up;S;C;Train;Barracks;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Worker;Up;S;C;Train;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Worker;Up;S;C;Train;Worker;Down;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Worker;Up;S;C;Train;Worker;EnemyDir;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;MoveAway;S;S_S;S;C;Idle;S;C;Harvest;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Attack;Farthest;S;C;Harvest;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Idle;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Build;Worker;Right;S;S_S;S;C;Train;Worker;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Build;Worker;Right;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Build;Worker;Right;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Build;Worker;Right;S;C;MoveAway;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;If_B_then_S_else_S;B;IsBuilder;S;C;Build;Light;Right;S;C;Build;Worker;Right;S;C;MoveAway;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;MoveToUnit;Enemy;LessHealthy;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Heavy;Down;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Build;Worker;Left;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;Harvest;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;0;S;C;MoveToUnit;Enemy;Farthest;S;C;Idle;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;5;S;C;Harvest;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;0;S;C;MoveToUnit;Enemy;Farthest;S;C;Idle;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;5;S;C;Harvest;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;0;S;C;MoveToUnit;Enemy;Farthest;S;C;Idle;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;C;Harvest;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;0;S;C;MoveToUnit;Enemy;Farthest;S;C;Idle;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;3;S;S_S;S;C;Harvest;S;S_S;S;C;MoveToUnit;Enemy;Farthest;S;C;Harvest;S;S_S;S;For_S;S;C;Train;Worker;EnemyDir;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;0;S;C;MoveToUnit;Enemy;Farthest;S;C;Idle;S;C;Attack;Strongest



for(Unit u){
	if(HaveQtdUnitsAttacking(3)) then {
		u.harvest()
		u.moveToUnit(Enemy,Farthest)
	} else {
		for(Unit u){
			u.train(Worker,EnemyDir)
		}
		for(Unit u){
			if(u.HasUnitWithinDistanceFromOpponent(0)) then {
				u.moveToUnit(Enemy,Farthest)
			} else {
				u.idle()
			}
		}
	}
	u.attack(Strongest)
}
FIM
