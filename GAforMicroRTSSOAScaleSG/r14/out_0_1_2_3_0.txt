Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S;B;HasNumberOfUnits;Barracks;0;S;S_S;S;C;Attack;Random;S;S_S;S;C;Train;Worker;Left;S;S_S;S;C;MoveAway;S;C;Idle
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;50;S;S_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Build;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;S_S;S;C;Train;Worker;Up;S;S_S;S;C;Build;Light;Down;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Build;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;S_S;S;C;Train;Worker;Up;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;For_S;S;C;Build;Ranged;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;S_S;S;C;Train;Worker;Right;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;Empty
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;S_S;S;C;Attack;Farthest;S;C;Train;Worker;Down;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Idle;S;S_S;S;C;Attack;Farthest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Idle;S;S_S;S;C;Attack;Farthest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;MoveAway;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S;B;HasLessNumberOfUnits;Light;1;S;C;Attack;Strongest;S;C;Idle;S;C;Train;Worker;Down



for(Unit u){
	for(Unit u){
		for(Unit u){
			for(Unit u){
				if(u.canHarvest()) then {
					e
				} else {
					u.train(Worker,Up)
				}
				for(Unit u){
					u.attack(Strongest)
				}
			}
		}
	}
}
FIM
