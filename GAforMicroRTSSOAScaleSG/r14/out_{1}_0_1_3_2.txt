Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;S_S;S;C;Train;Barracks;EnemyDir;S;C;Attack;LessHealthy;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Train;Worker;Left;S;C;MoveToUnit;Enemy;Strongest
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Attack;LessHealthy;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Train;Worker;Right;S;C;Train;Barracks;Up
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;If_B_then_S_else_S;B;OpponentHasNumberOfUnits;Worker;10;S;S_S;S;C;Build;Ranged;Left;S;C;Build;Heavy;Down;S;C;Attack;LessHealthy;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;S_S;S;C;Attack;LessHealthy;S;C;Harvest;S;S_S;S;C;Train;Worker;Up;S;C;Build;Heavy;Right
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Attack;LessHealthy;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;Empty;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Attack;LessHealthy;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;Empty;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Attack;LessHealthy;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;Empty;S;For_S;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;HasLessNumberOfUnits;Ranged;1;S;S_S;S;C;Train;Base;Right;S;C;Idle;S;S_S;S;S_S;S;C;Harvest;S;C;Build;Barracks;Down;S;C;MoveToUnit;Enemy;Strongest;S;S_S;S;If_B_then_S;B;HasUnitInOpponentRange;S;For_S;S;C;MoveAway;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;Empty;S;For_S;S;C;Train;Worker;Right



for(Unit u){
	for(Unit u){
		u.idle()
		u.harvest()
		u.moveToUnit(Enemy,Strongest)
	}
	if(u.HasUnitThatKillsInOneAttack()) then {
		if(u.HasUnitWithinDistanceFromOpponent(4)) then {
			e
		} else {
			for(Unit u){
				u.train(Worker,Right)
			}
		}
	}
}
FIM
