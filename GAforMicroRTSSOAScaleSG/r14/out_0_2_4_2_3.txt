Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;MostHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Attack;Weakest;S;C;Harvest;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Attack;Weakest;S;C;Harvest;S;For_S;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;4;S;C;MoveToUnit;Ally;Weakest;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;10;S;S_S;S;C;Build;Ranged;EnemyDir;S;C;Harvest;S;For_S;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;4;S;C;MoveToUnit;Ally;Weakest;S;S_S;S;If_B_then_S_else_S;B;CanAttack;S;S_S;S;C;Harvest;S;For_S;S;C;Attack;Weakest;S;C;Train;Worker;EnemyDir;S;C;Attack;Weakest



for(Unit u){
	for(Unit u){
		if(HasNumberOfWorkersHarvesting(4)) then {
			u.moveToUnit(Ally,Weakest)
		}
	}
	if(u.canAttack()) then {
		u.harvest()
		for(Unit u){
			u.attack(Weakest)
		}
	} else {
		u.train(Worker,EnemyDir)
	}
}
FIM
