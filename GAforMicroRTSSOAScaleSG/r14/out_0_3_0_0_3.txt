Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Left;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;S_S;S;C;Idle;S;C;Idle;S;S_S;S;C;Train;Worker;Left;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Train;Worker;Up;S;For_S;S;C;Attack;Weakest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;C;Attack;Closest;S;For_S;S;C;Harvest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;S_S;S;S_S;S;C;Harvest;S;C;Harvest;S;For_S;S;C;Attack;Weakest;S;For_S;S;C;Harvest;S;Empty
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;S_S;S;C;Harvest;S;For_S;S;S_S;S;If_B_then_S;B;HasLessNumberOfUnits;Worker;5;S;For_S;S;For_S;S;C;Build;Light;Up;S;C;Attack;Weakest;S;Empty



for(Unit u){
	u.train(Worker,Up)
	for(Unit u){
		if(u.canHarvest()) then {
			u.harvest()
			for(Unit u){
				if(HasLessNumberOfUnits(Worker,5)) then {
					for(Unit u){
						for(Unit u){
							u.build(Light,Up)
						}
					}
				}
				u.attack(Weakest)
			}
		} else {
			e
		}
	}
}
FIM
