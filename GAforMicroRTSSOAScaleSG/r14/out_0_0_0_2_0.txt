Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Build;Worker;Up;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;MostHealthy;S;C;Idle
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Build;Heavy;Down;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;MostHealthy;S;Empty
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Build;Barracks;Left;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;MostHealthy;S;Empty
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;For_S;S;C;Train;Worker;Left;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Weakest;S;Empty
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Build;Heavy;Left;S;C;Build;Base;EnemyDir;S;For_S;S;For_S;S;C;Train;Worker;Left;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Weakest;S;Empty
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Build;Light;Up;S;For_S;S;For_S;S;For_S;S;C;Train;Worker;Left;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Weakest;S;Empty
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Build;Worker;Right;S;For_S;S;For_S;S;For_S;S;For_S;S;C;Train;Worker;Left;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Weakest;S;Empty
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Build;Worker;Right;S;For_S;S;For_S;S;For_S;S;For_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S_else_S;B;CanHarvest;S;C;Attack;Weakest;S;Empty



for(Unit u){
	for(Unit u){
		u.idle()
		u.build(Worker,Right)
		for(Unit u){
			for(Unit u){
				for(Unit u){
					for(Unit u){
						u.train(Worker,EnemyDir)
					}
				}
			}
		}
		if(u.canHarvest()) then {
			u.attack(Weakest)
		} else {
			e
		}
	}
}
FIM
