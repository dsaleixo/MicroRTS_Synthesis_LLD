Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Base;Left;S;C;Train;Worker;Down;S;S_S;S;C;Idle;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;S_S;S;C;MoveToUnit;Ally;Weakest;S;C;Harvest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;S_S;S;C;MoveToUnit;Enemy;Random;S;C;Idle;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;C;MoveToUnit;Enemy;LessHealthy;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;C;Build;Heavy;Down;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;C;Build;Light;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;C;Harvest;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;Build;Worker;Left;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;MostHealthy;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Build;Worker;Down;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Attack;LessHealthy;S;S_S;S;C;Train;Worker;Left;S;C;Idle
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;For_S;S;C;Attack;Closest;S;S_S;S;C;Train;Worker;Up;S;C;Build;Barracks;EnemyDir;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;S_S;S;C;Attack;Closest;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;For_S;S;S_S;S;C;Idle;S;C;MoveToUnit;Ally;Farthest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;S_S;S;C;Attack;Closest;S;If_B_then_S;B;IsBuilder;S;For_S;S;S_S;S;C;Idle;S;C;MoveToUnit;Ally;Farthest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;S_S;S;C;Attack;Closest;S;If_B_then_S;B;IsBuilder;S;For_S;S;C;Idle;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;For_S;S;S_S;S;C;Attack;Closest;S;If_B_then_S;B;IsBuilder;S;For_S;S;C;Harvest;S;C;Train;Worker;Up



for(Unit u){
	for(Unit u){
		for(Unit u){
			u.attack(Closest)
			if(u.isBuilder()) then {
				for(Unit u){
					u.harvest()
				}
			}
		}
	}
	u.train(Worker,Up)
}
FIM
