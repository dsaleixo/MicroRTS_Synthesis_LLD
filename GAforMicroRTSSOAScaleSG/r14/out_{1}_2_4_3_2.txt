Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasLessNumberOfUnits;Heavy;5;S;C;Attack;Random;S;C;MoveAway;S;C;Train;Worker;Left
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;Left
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Right
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;1;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Harvest;S;C;Attack;LessHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfUnits;Base;10;S;C;Harvest;S;C;Build;Worker;EnemyDir;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;C;Idle;S;S_S;S;C;Harvest;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;3;S;For_S;S;S_S;S;C;Attack;Random;S;C;Harvest;S;S_S;S;C;Harvest;S;S_S;S;C;Attack;Weakest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;For_S;S;S_S;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;3;S;For_S;S;C;Attack;Weakest;S;S_S;S;C;Harvest;S;C;Train;Worker;Down



for(Unit u){
	for(Unit u){
		for(Unit u){
			if(HasNumberOfWorkersHarvesting(3)) then {
				for(Unit u){
					u.attack(Weakest)
				}
			}
			u.harvest()
			u.train(Worker,Down)
		}
	}
}
FIM
