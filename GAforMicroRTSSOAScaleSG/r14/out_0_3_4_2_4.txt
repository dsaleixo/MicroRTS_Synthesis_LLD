Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Right;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Attack;Strongest;S;C;Harvest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Attack;Strongest;S;C;Harvest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;Attack;Strongest;S;C;Harvest;S;C;Train;Worker;Down
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;Attack;Strongest;S;C;Harvest;S;C;Train;Worker;Down



for(Unit u){
	for(Unit u){
		for(Unit u){
			if(HasNumberOfWorkersHarvesting(1)) then {
				u.attack(Strongest)
			} else {
				u.harvest()
			}
		}
		u.train(Worker,Down)
	}
}
FIM
