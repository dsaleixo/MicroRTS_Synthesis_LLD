Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;EnemyDir
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Closest;S;S_S;S;C;Train;Worker;Left;S;C;Attack;Closest;S;S_S;S;For_S;S;C;Build;Ranged;Left;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Left;S;S_S;S;For_S;S;C;Idle;S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;3;S;C;Harvest;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Train;Worker;Left;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Idle
Atual=S;For_S;S;S_S;S;C;Train;Worker;Left;S;For_S;S;S_S;S;S_S;S;C;Build;Light;Down;S;C;Idle;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;For_S;S;S_S;S;S_S;S;C;Build;Light;Down;S;C;Idle;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;For_S;S;S_S;S;S_S;S;C;Build;Heavy;Up;S;C;Build;Base;EnemyDir;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Harvest;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Right;S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;3;S;S_S;S;C;Idle;S;C;Harvest;S;C;Attack;Closest



for(Unit u){
	u.train(Worker,Right)
	for(Unit u){
		if(HaveQtdUnitsAttacking(3)) then {
			u.harvest()
		}
		u.attack(Closest)
	}
}
FIM
