Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;Strongest;S;S_S;S;C;Train;Base;Down;S;C;Train;Worker;Right
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Attack;Strongest;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;C;Attack;Strongest;S;For_S;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;C;Attack;Strongest;S;For_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;S_S;S;C;Harvest;S;For_S;S;C;Train;Worker;EnemyDir;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;C;Harvest;S;S_S;S;C;Attack;Strongest;S;For_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;C;Harvest;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;25;S;If_B_then_S;B;IsBuilder;S;C;Train;Heavy;EnemyDir;S;S_S;S;S_S;S;C;Harvest;S;C;MoveToUnit;Ally;LessHealthy;S;For_S;S;C;Attack;Strongest;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Train;Worker;Up;S;If_B_then_S;B;HasLessNumberOfUnits;Ranged;25;S;S_S;S;C;MoveAway;S;C;Train;Worker;Left



for(Unit u){
	if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
		u.harvest()
		u.moveToUnit(Ally,LessHealthy)
		for(Unit u){
			u.attack(Strongest)
		}
	} else {
		u.train(Worker,Up)
	}
}
FIM
