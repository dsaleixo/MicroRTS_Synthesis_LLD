Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Down;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Down;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Right;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasNumberOfUnits;Ranged;0;S;For_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;4;S;For_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Train;Worker;Left;S;S_S;S;C;Build;Worker;EnemyDir;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;For_S;S;C;Attack;Strongest;S;S_S;S;C;Attack;Random;S;C;Idle;S;C;Train;Worker;Left;S;For_S;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;C;Attack;Strongest;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;C;Attack;Strongest;S;C;Train;Worker;Left;S;C;Harvest
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;If_B_then_S_else_S;B;CanHarvest;S;For_S;S;C;Attack;Strongest;S;C;Build;Heavy;Down;S;C;Train;Worker;Right;S;C;Harvest



for(Unit u){
	if(u.HasUnitWithinDistanceFromOpponent(10)) then {
		if(u.canHarvest()) then {
			for(Unit u){
				u.attack(Strongest)
			}
		} else {
			e
		}
	}
	u.train(Worker,Right)
	u.harvest()
}
FIM
