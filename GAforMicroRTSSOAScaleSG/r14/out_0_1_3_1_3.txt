Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Heavy;Right
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Light;Right
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Down;S;C;Build;Light;Right
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Build;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;C;Build;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Train;Heavy;EnemyDir;S;S_S;S;C;Build;Heavy;Right;S;S_S;S;C;Attack;Closest;S;C;Idle;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Build;Heavy;Right;S;C;Attack;Closest;S;C;Train;Worker;Down;S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Build;Light;Down
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Closest;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Build;Heavy;Up
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Harvest;S;C;Attack;Random;S;C;Train;Worker;EnemyDir;S;For_S;S;C;Idle
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S;B;HasUnitThatKillsInOneAttack;S;S_S;S;C;Harvest;S;C;Attack;Random;S;C;Train;Worker;EnemyDir;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;5;S;C;Attack;Weakest;S;C;MoveAway
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Harvest;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Attack;Weakest;S;C;MoveToUnit;Enemy;Weakest;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;5;S;C;Attack;Weakest;S;Empty
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Harvest;S;C;Train;Worker;EnemyDir;S;S_S;S;C;Attack;Weakest;S;C;MoveToUnit;Ally;MostHealthy;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;1;S;C;Attack;Weakest;S;Empty



for(Unit u){
	u.harvest()
	u.train(Worker,EnemyDir)
	u.moveToUnit(Ally,MostHealthy)
	for(Unit u){
		if(u.isBuilder()) then {
			if(HasNumberOfWorkersHarvesting(1)) then {
				u.attack(Weakest)
			}
		} else {
			e
		}
	}
}
FIM
