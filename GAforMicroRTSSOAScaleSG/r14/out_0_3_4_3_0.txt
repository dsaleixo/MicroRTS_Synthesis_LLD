Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Farthest
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;C;Harvest;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;MostHealthy;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;MostHealthy;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;MostHealthy;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;MostHealthy;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;OpponentHasUnitInPlayerRange;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;MostHealthy;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;MostHealthy;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;Empty
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;S_S;S;S_S;S;C;Build;Heavy;Left;S;C;Attack;LessHealthy;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;Empty
Atual=S;For_S;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;S_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Up;S;C;Train;Worker;EnemyDir;S;Empty
Atual=S;For_S;S;S_S;S;C;Harvest;S;If_B_then_S_else_S;B;CanAttack;S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Up;S;Empty



for(Unit u){
	u.harvest()
	if(u.canAttack()) then {
		for(Unit u){
			u.attack(LessHealthy)
			for(Unit u){
				u.train(Worker,Up)
			}
		}
	} else {
		e
	}
}
FIM
