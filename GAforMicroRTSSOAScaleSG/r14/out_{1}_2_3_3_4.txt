Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;S_S;S;C;Train;Heavy;Down;S;C;Build;Heavy;Down;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;MoveToUnit;Ally;Farthest;S;C;Attack;Closest
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Light;Left;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;MoveToUnit;Ally;Farthest;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Ranged;Right;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;MoveToUnit;Ally;Farthest;S;C;Attack;Weakest
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Heavy;EnemyDir;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;MoveToUnit;Ally;Farthest;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Worker;Down;S;C;Build;Light;Up;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;MoveToUnit;Ally;Farthest;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;CanHarvest;S;C;MoveToUnit;Enemy;Closest;S;S_S;S;C;Train;Worker;EnemyDir;S;C;Train;Worker;Down;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;3;S;C;MoveToUnit;Ally;Farthest;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;is_Type;Barracks;S;C;MoveToUnit;Enemy;Closest;S;C;Train;Worker;EnemyDir;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;25;S;C;Harvest;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;is_Type;Barracks;S;C;MoveAway;S;S_S;S;C;Build;Worker;Down;S;C;Train;Worker;EnemyDir;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Worker;Down;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;1;S;C;Build;Worker;Down;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;1;S;C;Build;Heavy;Left;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;1;S;C;Build;Light;EnemyDir;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;1;S;C;Build;Worker;EnemyDir;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;1;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Worker;Right;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Worker;Up;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Worker;Up;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;For_S;S;S_S;S;C;Build;Worker;Up;S;C;Train;Worker;Down;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;For_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;1;S;S_S;S;S_S;S;S_S;S;C;Harvest;S;C;Build;Ranged;EnemyDir;S;S_S;S;C;MoveAway;S;C;Train;Base;Up;S;If_B_then_S;B;HasLessNumberOfUnits;Ranged;2;S;C;MoveAway;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;S_S;S;For_S;S;If_B_then_S;B;is_Type;Base;S;C;Harvest;S;C;Attack;LessHealthy
Atual=S;For_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;EnemyDir;S;If_B_then_S;B;HaveQtdUnitsAttacking;2;S;If_B_then_S;B;CanHarvest;S;C;Harvest;S;C;Attack;LessHealthy



for(Unit u){
	for(Unit u){
		u.train(Worker,EnemyDir)
		if(HaveQtdUnitsAttacking(2)) then {
			if(u.canHarvest()) then {
				u.harvest()
			}
		}
		u.attack(LessHealthy)
	}
}
FIM
