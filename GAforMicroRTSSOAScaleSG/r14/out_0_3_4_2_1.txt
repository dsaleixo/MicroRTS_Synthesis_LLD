Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Build;Worker;Down;S;S_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Build;Worker;Down;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Random;S;S_S;S;C;MoveAway;S;C;Attack;Weakest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Build;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Build;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Build;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Build;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Build;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Build;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Build;Worker;Down;S;S_S;S;S_S;S;C;Idle;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Build;Worker;Down;S;S_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Idle;S;S_S;S;C;Idle;S;C;Harvest;S;S_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Idle;S;C;Harvest;S;S_S;S;C;Attack;Strongest;S;For_S;S;S_S;S;C;Train;Worker;Up;S;If_B_then_S;B;HasNumberOfWorkersHarvesting;1;S;If_B_then_S;B;OpponentHasNumberOfUnits;Worker;1;S;C;Attack;LessHealthy



for(Unit u){
	for(Unit u){
		u.idle()
	}
	u.harvest()
	for(Unit u){
		u.train(Worker,Up)
		if(HasNumberOfWorkersHarvesting(1)) then {
			u.attack(LessHealthy)
		}
	}
}
FIM
