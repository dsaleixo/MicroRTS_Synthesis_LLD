Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Random
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;S_S;S;C;Build;Barracks;Up;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;C;Train;Ranged;EnemyDir;S;C;Train;Worker;Right;S;For_S;S;C;Attack;LessHealthy;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;S_S;S;C;Build;Worker;Down;S;For_S;S;C;Train;Worker;Right;S;C;Train;Worker;Right;S;For_S;S;For_S;S;S_S;S;C;Build;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;C;Train;Worker;Right;S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;MoveToUnit;Ally;Farthest;S;C;Build;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;C;Train;Worker;Right;S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Build;Ranged;Up;S;C;Build;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;C;Train;Worker;Right;S;For_S;S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Build;Worker;Left;S;C;Build;Worker;Up;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;Empty;S;C;Train;Worker;Right;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Harvest;S;C;Attack;Closest



for(Unit u){
	if(u.HasUnitInOpponentRange()) then {
		e
	} else {
		u.train(Worker,Right)
	}
	for(Unit u){
		for(Unit u){
			u.idle()
			u.harvest()
			u.attack(Closest)
		}
	}
}
FIM
