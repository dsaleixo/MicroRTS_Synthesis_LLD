Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Idle;S;C;MoveToUnit;Enemy;MostHealthy;S;S_S;S;S_S;S;C;MoveToUnit;Enemy;MostHealthy;S;C;Build;Barracks;Down;S;S_S;S;C;Train;Worker;Down;S;C;Harvest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Enemy;MostHealthy;S;S_S;S;C;Attack;Strongest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;MoveToUnit;Enemy;Closest;S;C;MoveToUnit;Enemy;MostHealthy;S;S_S;S;C;Attack;Strongest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Up;S;S_S;S;C;Attack;Strongest;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;4;S;For_S;S;C;Train;Worker;Up;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;1;S;For_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Train;Heavy;Right;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Right;S;C;MoveAway
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;50;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;Attack;Closest;S;C;Harvest;S;If_B_then_S_else_S;B;CanHarvest;S;C;MoveToUnit;Enemy;MostHealthy;S;C;Train;Worker;EnemyDir



for(Unit u){
	if(u.isBuilder()) then {
		if(HasNumberOfWorkersHarvesting(1)) then {
			u.attack(Closest)
		} else {
			u.harvest()
		}
	} else {
		if(u.canHarvest()) then {
			u.moveToUnit(Enemy,MostHealthy)
		} else {
			u.train(Worker,EnemyDir)
		}
	}
}
FIM
