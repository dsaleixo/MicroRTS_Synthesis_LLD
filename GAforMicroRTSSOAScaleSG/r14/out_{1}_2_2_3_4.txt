Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;1;S;S_S;S;C;Attack;LessHealthy;S;C;Train;Light;Right;S;S_S;S;C;MoveToUnit;Enemy;MostHealthy;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Build;Ranged;EnemyDir;S;S_S;S;C;Attack;Closest;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Attack;LessHealthy;S;S_S;S;C;Idle;S;S_S;S;C;Train;Worker;Up;S;C;Harvest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;MoveToUnit;Enemy;LessHealthy;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;C;Attack;LessHealthy;S;S_S;S;C;Train;Worker;Up;S;C;Harvest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;MoveToUnit;Enemy;LessHealthy;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;C;Attack;LessHealthy;S;S_S;S;C;Train;Worker;Up;S;C;Harvest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;MoveToUnit;Enemy;LessHealthy;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;25;S;For_S;S;S_S;S;C;Build;Light;Right;S;C;Idle;S;S_S;S;C;Train;Worker;Up;S;C;Harvest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;1;S;C;MoveToUnit;Enemy;LessHealthy;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;For_S;S;S_S;S;C;Build;Light;Right;S;C;Idle;S;S_S;S;C;Train;Worker;Up;S;C;Harvest



for(Unit u){
	if(HasNumberOfWorkersHarvesting(1)) then {
		u.moveToUnit(Enemy,LessHealthy)
	} else {
		if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
			for(Unit u){
				u.build(Light,Right)
				u.idle()
			}
		}
	}
	u.train(Worker,Up)
	u.harvest()
}
FIM
