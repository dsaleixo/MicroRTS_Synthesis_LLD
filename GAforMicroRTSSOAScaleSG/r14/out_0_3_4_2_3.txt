Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Attack;Random;S;S_S;S;C;Train;Heavy;Right;S;C;Train;Worker;Right;S;For_S;S;If_B_then_S;B;IsBuilder;S;C;Harvest
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Attack;LessHealthy
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HaveQtdUnitsAttacking;2;S;S_S;S;For_S;S;C;Idle;S;For_S;S;C;Harvest;S;C;Train;Worker;Up;S;C;Attack;LessHealthy



for(Unit u){
	if(HaveQtdUnitsAttacking(2)) then {
		for(Unit u){
			u.harvest()
		}
	} else {
		u.train(Worker,Up)
	}
	u.attack(LessHealthy)
}
FIM
