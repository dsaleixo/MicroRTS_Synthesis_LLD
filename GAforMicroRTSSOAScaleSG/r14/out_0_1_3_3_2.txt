Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Train;Ranged;Up;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Down;S;If_B_then_S;B;CanAttack;S;C;Idle
Atual=S;For_S;S;S_S;S;C;Attack;Random;S;For_S;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;S_S;S;For_S;S;S_S;S;S_S;S;C;Harvest;S;C;Idle;S;For_S;S;C;Idle;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;For_S;S;S_S;S;C;Harvest;S;For_S;S;C;Idle;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;S_S;S;If_B_then_S;B;HaveQtdUnitsAttacking;4;S;For_S;S;C;Harvest;S;C;Train;Worker;Down;S;If_B_then_S;B;CanHarvest;S;For_S;S;C;Build;Heavy;Right



for(Unit u){
	u.attack(Strongest)
	for(Unit u){
		if(HaveQtdUnitsAttacking(4)) then {
			for(Unit u){
				u.harvest()
			}
		}
		u.train(Worker,Down)
	}
	if(u.canHarvest()) then {
		for(Unit u){
			u.build(Heavy,Right)
		}
	}
}
FIM
