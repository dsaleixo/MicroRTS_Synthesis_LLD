Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;Strongest
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;C;Attack;Random;S;C;Train;Ranged;Down;S;S_S;S;C;Attack;Strongest;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;For_S;S;S_S;S;C;Train;Heavy;EnemyDir;S;C;Attack;Random;S;S_S;S;C;Build;Heavy;Up;S;C;Build;Worker;Up;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Random;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;If_B_then_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;If_B_then_S;B;HasLessNumberOfUnits;Base;3;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Build;Heavy;EnemyDir;S;C;Harvest
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Build;Light;Left;S;Empty
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Build;Ranged;Right;S;Empty
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Build;Heavy;Up;S;Empty
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Build;Light;Left;S;C;Idle
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Build;Ranged;EnemyDir;S;Empty
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;C;Build;Ranged;Right;S;Empty
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;C;Build;Heavy;Down
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;C;Build;Light;Right
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Build;Heavy;Up;S;C;Idle;S;For_S;S;C;MoveToUnit;Enemy;MostHealthy
Atual=S;For_S;S;S_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Down;S;For_S;S;C;Build;Barracks;Left
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;S_S;S;C;Build;Heavy;Left;S;C;Attack;LessHealthy;S;C;Idle;S;C;Build;Barracks;Right;S;For_S;S;C;Train;Worker;Down
Atual=S;For_S;S;S_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Idle;S;C;Attack;Weakest;S;For_S;S;For_S;S;S_S;S;C;Train;Ranged;Down;S;C;Build;Barracks;Left;S;If_B_then_S_else_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;S_S;S;C;MoveToUnit;Enemy;Farthest;S;C;Harvest;S;S_S;S;For_S;S;C;Harvest;S;C;Harvest



for(Unit u){
	if(u.HasUnitWithinDistanceFromOpponent(10)) then {
		u.idle()
	} else {
		u.attack(Weakest)
	}
	for(Unit u){
		for(Unit u){
			u.train(Ranged,Down)
			u.build(Barracks,Left)
		}
	}
	if(u.OpponentHasUnitThatKillsUnitInOneAttack()) then {
		u.moveToUnit(Enemy,Farthest)
	} else {
		for(Unit u){
			u.harvest()
		}
	}
}
FIM
