Unloading StdEnv/2020
Atual=S;For_S;S;C;Attack;LessHealthy
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;C;Train;Worker;Up;S;C;Harvest
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;Down
Atual=S;S_S;S;For_S;S;C;Attack;LessHealthy;S;For_S;S;C;Train;Worker;EnemyDir
Atual=S;S_S;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;MoveToUnit;Ally;Closest;S;C;Attack;Closest;S;C;Train;Barracks;Left;S;For_S;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Train;Heavy;Left;S;C;Train;Worker;Left;S;S_S;S;For_S;S;C;Idle;S;For_S;S;C;Harvest
Atual=S;S_S;S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Down;S;C;Attack;Closest;S;For_S;S;C;Build;Base;Left;S;For_S;S;If_B_then_S;B;OpponentHasUnitThatKillsUnitInOneAttack;S;C;Train;Worker;Right
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Down;S;For_S;S;For_S;S;S_S;S;C;Build;Base;Up;S;C;MoveToUnit;Enemy;Weakest;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Down;S;For_S;S;For_S;S;C;MoveToUnit;Enemy;Random;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;10;S;C;Train;Worker;Down;S;For_S;S;For_S;S;Empty;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;For_S;S;C;Train;Worker;Down;S;Empty;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;4;S;For_S;S;C;Train;Worker;Down;S;Empty;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Build;Heavy;Up;S;C;Train;Worker;Left;S;C;Attack;Closest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Train;Worker;Left;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Train;Worker;Left;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Train;Worker;Left;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Train;Worker;Left;S;C;Attack;Random
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Base;Down;S;C;Train;Worker;Left;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;C;Build;Worker;Up;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;C;Build;Heavy;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;C;Build;Light;Right;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Train;Worker;Left;S;C;Build;Light;Down;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;LessHealthy;S;If_B_then_S_else_S;B;HasUnitThatKillsInOneAttack;S;C;Build;Heavy;Up;S;C;Build;Barracks;Down;S;S_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Harvest;S;C;Train;Worker;Down;S;C;Attack;Weakest
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;LessHealthy;S;For_S;S;S_S;S;S_S;S;C;Harvest;S;For_S;S;C;Build;Barracks;Up;S;C;Train;Heavy;Left
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;MostHealthy;S;For_S;S;S_S;S;For_S;S;S_S;S;C;Harvest;S;For_S;S;C;Build;Barracks;Up;S;C;Train;Heavy;Left
Atual=S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Attack;MostHealthy;S;For_S;S;S_S;S;For_S;S;S_S;S;Empty;S;Empty;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;S_S;S;C;Attack;LessHealthy;S;C;Build;Worker;Down;S;For_S;S;For_S;S;C;Train;Worker;Up
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;S_S;S;If_B_then_S_else_S;B;HasNumberOfWorkersHarvesting;10;S;C;Train;Base;Right;S;C;Harvest;S;For_S;S;For_S;S;S_S;S;C;Train;Ranged;Up;S;C;Build;Barracks;EnemyDir
Atual=S;For_S;S;S_S;S;C;Attack;Strongest;S;For_S;S;S_S;S;C;Harvest;S;For_S;S;For_S;S;S_S;S;C;Train;Heavy;Right;S;C;Build;Barracks;Left
Atual=S;For_S;S;S_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Attack;Closest;S;For_S;S;C;Train;Worker;Left
Atual=S;For_S;S;S_S;S;For_S;S;C;Train;Worker;Down;S;For_S;S;For_S;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;S_S;S;For_S;S;C;Train;Worker;Down;S;For_S;S;For_S;S;C;Attack;Closest;S;For_S;S;For_S;S;For_S;S;C;MoveToUnit;Enemy;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;S_S;S;For_S;S;For_S;S;C;Train;Worker;Down;S;For_S;S;For_S;S;C;Attack;Closest;S;For_S;S;S_S;S;C;Attack;MostHealthy;S;For_S;S;For_S;S;S_S;S;C;Harvest;S;C;MoveAway
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;S_S;S;For_S;S;For_S;S;C;Train;Worker;Down;S;For_S;S;For_S;S;C;Attack;Closest;S;For_S;S;S_S;S;C;Attack;MostHealthy;S;For_S;S;For_S;S;C;Attack;LessHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitInOpponentRange;S;For_S;S;For_S;S;C;Train;Worker;Down;S;For_S;S;For_S;S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;For_S;S;C;Train;Worker;Down;S;For_S;S;For_S;S;For_S;S;C;Attack;MostHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;HasUnitWithinDistanceFromOpponent;2;S;For_S;S;For_S;S;C;Train;Worker;Down;S;For_S;S;For_S;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;For_S;S;For_S;S;C;Train;Worker;Down;S;For_S;S;For_S;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;For_S;S;For_S;S;C;Harvest;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;For_S;S;For_S;S;C;Attack;Weakest
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;Empty;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;For_S;S;For_S;S;S_S;S;S_S;S;C;Idle;S;C;Train;Ranged;Up;S;S_S;S;C;Attack;Random;S;C;Harvest
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;Empty;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;For_S;S;For_S;S;S_S;S;C;Idle;S;C;Attack;Random
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;Empty;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;For_S;S;For_S;S;S_S;S;C;Idle;S;C;Attack;MostHealthy
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;Empty;S;For_S;S;S_S;S;C;Train;Worker;EnemyDir;S;For_S;S;For_S;S;S_S;S;C;Idle;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;Empty;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasNumberOfUnits;Worker;3;S;C;Train;Worker;EnemyDir;S;For_S;S;For_S;S;S_S;S;C;Idle;S;C;Attack;Closest
Atual=S;For_S;S;If_B_then_S_else_S;B;IsBuilder;S;Empty;S;For_S;S;S_S;S;If_B_then_S;B;OpponentHasNumberOfUnits;Worker;3;S;C;Train;Worker;EnemyDir;S;For_S;S;For_S;S;S_S;S;C;Attack;Closest;S;C;Train;Worker;Up



for(Unit u){
	if(u.isBuilder()) then {
		e
	} else {
		for(Unit u){
			if(OpponentHasNumberOfUnits(Worker,3)) then {
				u.train(Worker,EnemyDir)
			}
			for(Unit u){
				for(Unit u){
					u.attack(Closest)
					u.train(Worker,Up)
				}
			}
		}
	}
}
FIM
